<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>

  <!-- Favicon -->
  <link rel="icon" href="/favicon.ico" type="image/x-icon">

  <!-- Tailwind CSS CDN -->
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <!-- Socket.IO -->
  <script src="https://cdn.socket.io/4.6.0/socket.io.min.js"></script>

  <!-- Custom CSS -->
  <style>
    body {
      background-color: #121212;
      color: #e0e0e0;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    .bg-dark-100 {
      background-color: #1e1e1e;
    }

    .bg-dark-200 {
      background-color: #2d2d2d;
    }

    .bg-dark-300 {
      background-color: #3d3d3d;
    }

    .text-neon-blue {
      color: #00a8ff;
    }

    .bg-neon-blue {
      background-color: #00a8ff;
    }

    .from-neon-blue {
      --tw-gradient-from: #00a8ff;
    }

    .to-neon-purple {
      --tw-gradient-to: #9c27b0;
    }

    .pulse {
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0% {
        opacity: 1;
      }
      50% {
        opacity: 0.5;
      }
      100% {
        opacity: 1;
      }
    }

    .fade-in {
      animation: fadeIn 0.5s ease-in-out;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

    .status-badge {
      transition: all 0.3s ease;
    }

    .status-badge.updated {
      animation: highlight 2s ease-in-out;
    }

    @keyframes highlight {
      0% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.05);
        box-shadow: 0 0 15px rgba(0, 168, 255, 0.7);
      }
      100% {
        transform: scale(1);
      }
    }
  </style>
</head>
<body class="min-h-screen flex flex-col">
  <!-- Header -->
  <header class="bg-dark-200 border-b border-gray-700 py-4">
    <div class="container mx-auto px-4 flex justify-between items-center">
      <div class="flex items-center">
        <a href="/" class="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-neon-blue to-neon-purple">
          FTRAISE AI Status
        </a>
      </div>

      <div class="flex items-center space-x-4">
        <% if (isAuthenticated && user && user.username) { %>
          <span class="text-gray-400">Welcome, <%= user.username %></span>
        <% } %>
        <a href="http://localhost:3000" class="text-gray-400 hover:text-white transition-colors">
          <i class="fas fa-arrow-left mr-2"></i> Back to Main Site
        </a>
      </div>
    </div>
  </header>

  <!-- Flash Messages -->
  <% if(success_msg && success_msg.length > 0) { %>
    <div class="bg-green-500 text-white px-4 py-3 fade-in" role="alert">
      <div class="container mx-auto px-4">
        <div class="flex items-center">
          <i class="fas fa-check-circle mr-2"></i>
          <p><%= success_msg %></p>
        </div>
      </div>
    </div>
  <% } %>

  <% if(error_msg && error_msg.length > 0) { %>
    <div class="bg-red-500 text-white px-4 py-3 fade-in" role="alert">
      <div class="container mx-auto px-4">
        <div class="flex items-center">
          <i class="fas fa-exclamation-circle mr-2"></i>
          <p><%= error_msg %></p>
        </div>
      </div>
    </div>
  <% } %>

  <% if(error && error.length > 0) { %>
    <div class="bg-red-500 text-white px-4 py-3 fade-in" role="alert">
      <div class="container mx-auto px-4">
        <div class="flex items-center">
          <i class="fas fa-exclamation-triangle mr-2"></i>
          <p><%= error %></p>
        </div>
      </div>
    </div>
  <% } %>

  <!-- Main Content -->
  <main class="flex-grow py-6">
    <%- body %>
  </main>

  <!-- Footer -->
  <footer class="bg-dark-200 border-t border-gray-700 py-6">
    <div class="container mx-auto px-4">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <div class="mb-4 md:mb-0">
          <p class="text-gray-400">&copy; <%= new Date().getFullYear() %> FTRAISE AI. All rights reserved.</p>
        </div>

        <div class="flex space-x-4">
          <a href="https://ftraiseai.onrender.com" class="text-gray-400 hover:text-white transition-colors">
            Main Site
          </a>
          <a href="https://ftraiseai.onrender.com/policies/privacy" class="text-gray-400 hover:text-white transition-colors">
            Privacy Policy
          </a>
          <a href="https://ftraiseai.onrender.com/policies/terms" class="text-gray-400 hover:text-white transition-colors">
            Terms of Service
          </a>
        </div>
      </div>
    </div>
  </footer>

  <!-- Custom JS -->
  <script>
    // Initialize Socket.IO connection
    const socket = io();

    // Listen for status updates
    socket.on('statusUpdate', (data) => {
      console.log('Status update received:', data);
      updateStatusUI(data);
    });

    // Function to update the UI with new status data
    function updateStatusUI(data) {
      // Update overall status
      const overallStatusElement = document.getElementById('overall-status');
      if (overallStatusElement) {
        const statusInfo = getStatusInfo(data.overallStatus);
        overallStatusElement.innerHTML = `${statusInfo.icon} ${statusInfo.text}`;
        overallStatusElement.classList.add('updated');
        setTimeout(() => {
          overallStatusElement.classList.remove('updated');
        }, 2000);
      }

      // Update last updated time
      const lastUpdatedElement = document.getElementById('last-updated');
      if (lastUpdatedElement) {
        lastUpdatedElement.textContent = new Date(data.updatedAt).toLocaleString();
      }

      // Update component statuses
      data.components.forEach(component => {
        const componentStatusElement = document.getElementById(`component-status-${component.name.replace(/\s+/g, '-').toLowerCase()}`);
        if (componentStatusElement) {
          const statusInfo = getStatusInfo(component.status);
          componentStatusElement.innerHTML = `<span class="text-lg mr-2">${statusInfo.icon}</span><span>${statusInfo.text}</span>`;
          componentStatusElement.classList.add('updated');
          setTimeout(() => {
            componentStatusElement.classList.remove('updated');
          }, 2000);
        }

        const componentLastCheckedElement = document.getElementById(`component-last-checked-${component.name.replace(/\s+/g, '-').toLowerCase()}`);
        if (componentLastCheckedElement) {
          componentLastCheckedElement.textContent = new Date(component.lastChecked).toLocaleString();
        }
      });
    }

    // Helper function to get status info
    function getStatusInfo(status) {
      switch (status) {
        case 'operational':
          return { text: 'Operational', color: 'green', icon: 'ðŸŸ¢' };
        case 'degraded_performance':
          return { text: 'Degraded Performance', color: 'yellow', icon: 'ðŸŸ¡' };
        case 'partial_outage':
          return { text: 'Partial Outage', color: 'orange', icon: 'ðŸŸ ' };
        case 'major_outage':
          return { text: 'Major Outage', color: 'red', icon: 'ðŸ”´' };
        default:
          return { text: 'Unknown', color: 'gray', icon: 'âšª' };
      }
    }
  </script>
</body>
</html>
