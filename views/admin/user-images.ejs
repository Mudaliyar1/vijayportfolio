<!-- Admin User Images View -->
<div class="container mx-auto px-4">
  <div class="mb-8">
    <div class="flex items-center">
      <a href="/admin/images" class="text-gray-400 hover:text-white mr-3">
        <i class="fas fa-arrow-left"></i>
      </a>
      <h1 class="text-2xl font-bold"><%= user.username %>'s Images</h1>
    </div>
    <p class="text-gray-400 mt-1"><%= user.email %></p>
  </div>

  <!-- Filters -->
  <div class="bg-dark-200 rounded-lg border border-gray-700 p-4 mb-8">
    <div class="flex flex-col md:flex-row gap-4">
      <div class="flex-grow">
        <input
          type="text"
          id="image-search"
          placeholder="Search by prompt or style..."
          class="w-full bg-dark-300 border border-gray-700 rounded-md py-2 px-4 text-white focus:outline-none focus:border-neon-blue transition-colors"
        >
      </div>

      <div class="flex gap-2">
        <select
          id="type-filter"
          class="bg-dark-300 border border-gray-700 rounded-md py-2 px-4 text-white focus:outline-none focus:border-neon-blue transition-colors"
        >
          <option value="all">All Types</option>
          <option value="generated">Generated</option>
          <option value="uploaded">Uploaded</option>
          <option value="transformed">Transformed</option>
        </select>

        <select
          id="sort-filter"
          class="bg-dark-300 border border-gray-700 rounded-md py-2 px-4 text-white focus:outline-none focus:border-neon-blue transition-colors"
        >
          <option value="newest">Newest First</option>
          <option value="oldest">Oldest First</option>
        </select>
      </div>
    </div>
  </div>

  <!-- Images Grid -->
  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6" id="images-grid">
    <% if (images.length === 0) { %>
      <div class="col-span-full text-center py-12">
        <i class="fas fa-image text-5xl text-gray-700 mb-4"></i>
        <p class="text-gray-400">No images found for this user</p>
      </div>
    <% } else { %>
      <% images.forEach(image => { %>
        <div class="bg-dark-200 rounded-lg overflow-hidden border border-gray-700 image-card"
             data-type="<%= image.type %>"
             data-prompt="<%= image.prompt ? image.prompt.toLowerCase() : '' %>"
             data-style="<%= image.style ? image.style.toLowerCase() : '' %>"
             data-date="<%= image.createdAt.getTime() %>">
          <div class="relative">
            <% if (image.type === 'generated' && image.referenceImagePath) { %>
              <div class="relative">
                <div class="absolute inset-0 flex">
                  <div class="w-1/2 h-48 overflow-hidden">
                    <img src="<%= image.referenceImagePath %>" alt="Reference" class="w-full h-full object-cover opacity-80">
                    <div class="absolute top-2 left-2 bg-dark-300/80 backdrop-blur-sm text-xs px-2 py-1 rounded-full text-gray-300">Ref</div>
                  </div>
                  <div class="w-1/2 h-48 overflow-hidden">
                    <img src="<%= image.imagePath %>" alt="Generated" class="w-full h-full object-cover">
                  </div>
                </div>
                <img src="<%= image.imagePath %>" alt="Image" class="w-full h-48 object-cover opacity-0"> <!-- Invisible placeholder for height -->
              </div>
            <% } else { %>
              <img src="<%= image.imagePath %>" alt="Image" class="w-full h-48 object-cover">
            <% } %>
            <span class="absolute top-2 right-2 inline-block bg-dark-300/80 backdrop-blur-sm text-xs px-2 py-1 rounded-full
                        <%= image.type === 'generated' ? 'text-green-500' : image.type === 'uploaded' ? 'text-blue-500' : 'text-purple-500' %>">
              <%= image.type.charAt(0).toUpperCase() + image.type.slice(1) %>
              <% if (image.referenceImagePath) { %>
                <i class="fas fa-images ml-1 text-xs"></i>
              <% } %>
            </span>
          </div>

          <div class="p-3">
            <div class="flex justify-between items-center mb-2">
              <span class="text-xs text-gray-400"><%= new Date(image.createdAt).toLocaleString() %></span>
              <% if (image.style) { %>
                <span class="inline-block bg-dark-300 text-neon-blue text-xs px-2 py-0.5 rounded-full"><%= image.style %></span>
              <% } %>
            </div>

            <% if (image.prompt) { %>
              <p class="text-sm text-gray-300 mb-3 line-clamp-2" title="<%= image.prompt %>"><%= image.prompt %></p>
            <% } %>

            <div class="flex justify-end">
              <button class="text-red-500 hover:text-red-400 delete-image" data-id="<%= image._id %>">
                <i class="fas fa-trash-alt"></i>
              </button>
            </div>
          </div>
        </div>
      <% }); %>
    <% } %>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="fixed inset-0 bg-black/70 flex items-center justify-center z-50 hidden">
  <div class="bg-dark-100 rounded-lg border border-gray-800 p-6 max-w-md w-full mx-4 relative">
    <button id="close-modal" class="absolute top-3 right-3 text-gray-400 hover:text-white">
      <i class="fas fa-times"></i>
    </button>

    <div class="text-center mb-6">
      <div class="inline-block p-3 bg-red-500/20 rounded-full mb-4">
        <i class="fas fa-exclamation-triangle text-red-500 text-2xl"></i>
      </div>
      <h3 class="text-xl font-semibold mb-2">Delete Image</h3>
      <p class="text-gray-300">Are you sure you want to delete this image? This action cannot be undone.</p>
    </div>

    <div class="flex justify-end space-x-3">
      <button id="cancel-delete" class="py-2 px-4 bg-dark-300 text-white rounded-md hover:bg-dark-400 transition-colors">
        Cancel
      </button>
      <button id="confirm-delete" class="py-2 px-4 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">
        Delete
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Live search and filtering
    const imageSearch = document.getElementById('image-search');
    const typeFilter = document.getElementById('type-filter');
    const sortFilter = document.getElementById('sort-filter');
    const imageCards = document.querySelectorAll('.image-card');

    // Function to filter and sort images
    function filterAndSortImages() {
      const searchTerm = imageSearch.value.toLowerCase();
      const typeValue = typeFilter.value;
      const sortValue = sortFilter.value;

      // Filter images
      imageCards.forEach(card => {
        const type = card.dataset.type;
        const prompt = card.dataset.prompt;
        const style = card.dataset.style;

        // Search filter
        const matchesSearch = searchTerm === '' ||
                             prompt.includes(searchTerm) ||
                             style.includes(searchTerm);

        // Type filter
        const matchesType = typeValue === 'all' || type === typeValue;

        // Show/hide card
        if (matchesSearch && matchesType) {
          card.classList.remove('hidden');
        } else {
          card.classList.add('hidden');
        }
      });

      // Sort images
      const grid = document.getElementById('images-grid');
      const cards = Array.from(grid.querySelectorAll('.image-card:not(.hidden)'));

      cards.sort((a, b) => {
        const dateA = parseInt(a.dataset.date);
        const dateB = parseInt(b.dataset.date);

        if (sortValue === 'newest') {
          return dateB - dateA;
        } else {
          return dateA - dateB;
        }
      });

      // Re-append cards in sorted order
      cards.forEach(card => grid.appendChild(card));
    }

    // Add event listeners
    imageSearch.addEventListener('input', filterAndSortImages);
    typeFilter.addEventListener('change', filterAndSortImages);
    sortFilter.addEventListener('change', filterAndSortImages);

    // Delete image functionality
    const deleteButtons = document.querySelectorAll('.delete-image');
    const deleteModal = document.getElementById('delete-modal');
    const closeModal = document.getElementById('close-modal');
    const cancelDelete = document.getElementById('cancel-delete');
    const confirmDelete = document.getElementById('confirm-delete');
    let currentImageId = null;

    deleteButtons.forEach(button => {
      button.addEventListener('click', () => {
        currentImageId = button.dataset.id;
        deleteModal.classList.remove('hidden');
      });
    });

    closeModal.addEventListener('click', () => {
      deleteModal.classList.add('hidden');
      currentImageId = null;
    });

    cancelDelete.addEventListener('click', () => {
      deleteModal.classList.add('hidden');
      currentImageId = null;
    });

    confirmDelete.addEventListener('click', async () => {
      if (!currentImageId) return;

      try {
        const response = await fetch(`/admin/images/${currentImageId}`, {
          method: 'DELETE'
        });

        const data = await response.json();

        if (data.success) {
          // Remove the image card from the grid
          const card = document.querySelector(`.delete-image[data-id="${currentImageId}"]`).closest('.image-card');
          card.remove();

          // Show success message
          alert('Image deleted successfully');
        } else {
          alert(data.message);
        }
      } catch (err) {
        console.error('Error deleting image:', err);
        alert('An error occurred while deleting the image');
      } finally {
        deleteModal.classList.add('hidden');
        currentImageId = null;
      }
    });
  });
</script>
