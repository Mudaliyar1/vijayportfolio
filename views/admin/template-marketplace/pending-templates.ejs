<!-- Admin Pending Templates -->
<div>
  <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Pending Templates</h1>
      <a href="/admin/template-marketplace" class="bg-dark-200 hover:bg-dark-300 text-gray-300 px-3 py-2 rounded-md text-sm transition-colors">
        <i class="fas fa-arrow-left mr-1"></i> Back to Dashboard
      </a>
    </div>

    <!-- Pending Templates -->
    <div class="bg-dark-100 rounded-lg border border-gray-800 p-6">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold">Templates Awaiting Approval</h2>
        <div class="flex items-center space-x-2">
          <div class="relative">
            <input type="text" id="template-search" placeholder="Search templates..." class="bg-dark-300 border border-gray-700 rounded-md px-3 py-1 text-sm text-white focus:outline-none focus:border-neon-blue">
          </div>
        </div>
      </div>

      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-dark-200">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Template</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Creator</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Category</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Price</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Submitted</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-dark-100 divide-y divide-gray-700" id="templates-table-body">
            <% if (pendingTemplates.length === 0) { %>
              <tr>
                <td colspan="6" class="px-6 py-4 text-center text-gray-400">
                  No pending templates found.
                </td>
              </tr>
            <% } else { %>
              <% pendingTemplates.forEach(template => { %>
                <tr class="template-row" data-name="<%= template.name.toLowerCase() %>">
                  <td class="px-6 py-4">
                    <div class="flex items-center">
                      <img src="<%= template.thumbnail %>" alt="<%= template.name %>" class="w-10 h-10 rounded object-cover mr-3">
                      <div>
                        <div class="text-sm font-medium text-white"><%= template.name %></div>
                        <div class="text-xs text-gray-400 truncate max-w-xs"><%= template.description.substring(0, 50) %>...</div>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-white"><%= template.creator ? template.creator.username : 'Unknown' %></div>
                    <div class="text-xs text-gray-400"><%= template.creator ? template.creator.email : 'Unknown' %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-white"><%= template.businessType %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <% if (template.price > 0) { %>
                      <div class="text-sm text-white">$<%= template.price.toFixed(2) %></div>
                    <% } else { %>
                      <div class="text-sm text-neon-green">Free</div>
                    <% } %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-white"><%= new Date(template.createdAt).toLocaleDateString() %></div>
                    <div class="text-xs text-gray-400"><%= new Date(template.createdAt).toLocaleTimeString() %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex space-x-3">
                      <a href="/template-marketplace/template/<%= template._id %>" target="_blank" class="text-neon-blue hover:text-blue-400">
                        <i class="fas fa-eye"></i> View
                      </a>
                      <button class="text-neon-green hover:text-green-400 approve-btn" data-id="<%= template._id %>">
                        <i class="fas fa-check"></i> Approve
                      </button>
                      <button class="text-red-500 hover:text-red-400 reject-btn" data-id="<%= template._id %>">
                        <i class="fas fa-times"></i> Reject
                      </button>
                    </div>
                  </td>
                </tr>
              <% }); %>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Approve Confirmation Modal -->
<div id="approve-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
  <div class="bg-dark-200 rounded-lg shadow-xl max-w-md w-full p-6">
    <h3 class="text-xl font-semibold text-white mb-4">Confirm Approval</h3>
    <p class="text-gray-300 mb-6">Are you sure you want to approve this template? It will be published to the marketplace.</p>
    <div class="flex justify-end space-x-3">
      <button id="cancel-approve-btn" class="bg-dark-300 hover:bg-dark-400 text-gray-300 px-4 py-2 rounded-md transition-colors">
        Cancel
      </button>
      <button id="confirm-approve-btn" class="bg-neon-green hover:bg-green-600 text-white px-4 py-2 rounded-md transition-colors">
        Approve
      </button>
    </div>
  </div>
</div>

<!-- Reject Confirmation Modal -->
<div id="reject-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
  <div class="bg-dark-200 rounded-lg shadow-xl max-w-md w-full p-6">
    <h3 class="text-xl font-semibold text-white mb-4">Confirm Rejection</h3>
    <p class="text-gray-300 mb-4">Are you sure you want to reject this template? This action cannot be undone.</p>
    <div class="mb-4">
      <label for="rejection-reason" class="block text-gray-300 mb-2">Reason for rejection (optional)</label>
      <textarea id="rejection-reason" rows="3" class="w-full bg-dark-300 border border-gray-600 rounded-md px-4 py-2 text-white focus:outline-none focus:border-neon-blue"></textarea>
    </div>
    <div class="flex justify-end space-x-3">
      <button id="cancel-reject-btn" class="bg-dark-300 hover:bg-dark-400 text-gray-300 px-4 py-2 rounded-md transition-colors">
        Cancel
      </button>
      <button id="confirm-reject-btn" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md transition-colors">
        Reject
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Template search functionality
    const templateSearch = document.getElementById('template-search');
    const templateRows = document.querySelectorAll('.template-row');

    templateSearch.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();

      templateRows.forEach(row => {
        const name = row.getAttribute('data-name');

        if (name.includes(searchTerm)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    });

    // Approve modal
    const approveModal = document.getElementById('approve-modal');
    const cancelApproveBtn = document.getElementById('cancel-approve-btn');
    const confirmApproveBtn = document.getElementById('confirm-approve-btn');
    const approveButtons = document.querySelectorAll('.approve-btn');

    let templateToApprove = null;

    // Show approve confirmation modal
    approveButtons.forEach(button => {
      button.addEventListener('click', function() {
        templateToApprove = this.getAttribute('data-id');
        approveModal.classList.remove('hidden');
      });
    });

    // Hide approve confirmation modal
    cancelApproveBtn.addEventListener('click', function() {
      approveModal.classList.add('hidden');
      templateToApprove = null;
    });

    // Approve template
    confirmApproveBtn.addEventListener('click', async function() {
      if (!templateToApprove) return;

      try {
        const response = await fetch(`/admin/template-marketplace/approve/${templateToApprove}`, {
          method: 'POST'
        });

        if (response.ok) {
          // Reload the page to show updated list
          window.location.reload();
        } else {
          alert('Failed to approve template');
        }
      } catch (error) {
        console.error('Error approving template:', error);
        alert('An error occurred while approving the template');
      } finally {
        approveModal.classList.add('hidden');
        templateToApprove = null;
      }
    });

    // Reject modal
    const rejectModal = document.getElementById('reject-modal');
    const rejectionReason = document.getElementById('rejection-reason');
    const cancelRejectBtn = document.getElementById('cancel-reject-btn');
    const confirmRejectBtn = document.getElementById('confirm-reject-btn');
    const rejectButtons = document.querySelectorAll('.reject-btn');

    let templateToReject = null;

    // Show reject confirmation modal
    rejectButtons.forEach(button => {
      button.addEventListener('click', function() {
        templateToReject = this.getAttribute('data-id');
        rejectModal.classList.remove('hidden');
      });
    });

    // Hide reject confirmation modal
    cancelRejectBtn.addEventListener('click', function() {
      rejectModal.classList.add('hidden');
      rejectionReason.value = '';
      templateToReject = null;
    });

    // Reject template
    confirmRejectBtn.addEventListener('click', async function() {
      if (!templateToReject) return;

      try {
        const response = await fetch(`/admin/template-marketplace/reject/${templateToReject}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            reason: rejectionReason.value
          })
        });

        if (response.ok) {
          // Reload the page to show updated list
          window.location.reload();
        } else {
          alert('Failed to reject template');
        }
      } catch (error) {
        console.error('Error rejecting template:', error);
        alert('An error occurred while rejecting the template');
      } finally {
        rejectModal.classList.add('hidden');
        rejectionReason.value = '';
        templateToReject = null;
      }
    });
  });
</script>
