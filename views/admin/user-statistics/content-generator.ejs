<!-- Admin Content Generator Statistics -->
<div class="flex flex-col md:flex-row">
  <div class="flex-grow p-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Content Generator Statistics</h1>
      <a href="/admin/user-statistics" class="bg-dark-200 hover:bg-dark-300 text-gray-300 px-3 py-2 rounded-md text-sm transition-colors">
        <i class="fas fa-arrow-left mr-1"></i> Back to Dashboard
      </a>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
      <div class="bg-dark-100 rounded-lg border border-gray-800 p-6 hover:border-neon-blue transition-colors">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold">Total Generations</h3>
          <div class="w-10 h-10 rounded-full bg-neon-blue/20 flex items-center justify-center">
            <i class="fas fa-file-alt text-neon-blue"></i>
          </div>
        </div>
        <p class="text-3xl font-bold"><%= totalGenerations %></p>
        <p class="text-sm text-gray-400 mt-1">Content pieces generated</p>
      </div>

      <div class="bg-dark-100 rounded-lg border border-gray-800 p-6 hover:border-neon-green transition-colors">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold">Unique Users</h3>
          <div class="w-10 h-10 rounded-full bg-neon-green/20 flex items-center justify-center">
            <i class="fas fa-users text-neon-green"></i>
          </div>
        </div>
        <p class="text-3xl font-bold"><%= uniqueUsers %></p>
        <p class="text-sm text-gray-400 mt-1">Users generating content</p>
      </div>
    </div>

    <!-- Distribution Charts -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <div class="bg-dark-100 rounded-lg border border-gray-800 p-6">
        <h3 class="text-md font-semibold mb-4">Content Type Distribution</h3>
        <div class="h-64">
          <canvas id="contentTypeChart"></canvas>
        </div>
      </div>
      
      <div class="bg-dark-100 rounded-lg border border-gray-800 p-6">
        <h3 class="text-md font-semibold mb-4">Tone Distribution</h3>
        <div class="h-64">
          <canvas id="toneChart"></canvas>
        </div>
      </div>
      
      <div class="bg-dark-100 rounded-lg border border-gray-800 p-6">
        <h3 class="text-md font-semibold mb-4">Length Distribution</h3>
        <div class="h-64">
          <canvas id="lengthChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Usage Chart -->
    <div class="bg-dark-100 rounded-lg border border-gray-800 p-6 mb-8">
      <h2 class="text-xl font-semibold mb-4">Daily Usage (Last 30 Days)</h2>
      <div class="h-80">
        <canvas id="usageChart"></canvas>
      </div>
    </div>

    <!-- Top Users -->
    <div class="bg-dark-100 rounded-lg border border-gray-800 p-6 mb-8">
      <h2 class="text-xl font-semibold mb-4">Top Users</h2>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-dark-200">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">User</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Generations</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-dark-100 divide-y divide-gray-700">
            <% if (topUsers.length === 0) { %>
              <tr>
                <td colspan="3" class="px-6 py-4 text-center text-gray-400">
                  No user activity found.
                </td>
              </tr>
            <% } else { %>
              <% topUsers.forEach(user => { %>
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-white"><%= user.username %></div>
                    <div class="text-xs text-gray-400"><%= user.email %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-white"><%= user.count %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <a href="/admin/user-statistics/user/<%= user._id %>" class="text-neon-blue hover:text-blue-400">
                      <i class="fas fa-eye mr-1"></i> View Details
                    </a>
                  </td>
                </tr>
              <% }); %>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Recent Generations -->
    <div class="bg-dark-100 rounded-lg border border-gray-800 p-6">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold">Recent Generations</h2>
        <div class="flex items-center space-x-2">
          <div class="relative">
            <input type="text" id="user-search" placeholder="Search by user..." class="bg-dark-300 border border-gray-700 rounded-md px-3 py-1 text-sm text-white focus:outline-none focus:border-neon-blue">
          </div>
        </div>
      </div>

      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-dark-200">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Date</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">User</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Type</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Prompt</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Template</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-dark-100 divide-y divide-gray-700" id="generations-table-body">
            <% if (recentGenerations.length === 0) { %>
              <tr>
                <td colspan="6" class="px-6 py-4 text-center text-gray-400">
                  No content generations found.
                </td>
              </tr>
            <% } else { %>
              <% recentGenerations.forEach(generation => { %>
                <tr class="generation-row" data-user="<%= generation.user.username.toLowerCase() %>">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-white"><%= new Date(generation.createdAt).toLocaleDateString() %></div>
                    <div class="text-xs text-gray-400"><%= new Date(generation.createdAt).toLocaleTimeString() %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-white"><%= generation.user.username %></div>
                    <div class="text-xs text-gray-400"><%= generation.user.email %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                      <%= generation.contentType === 'website' ? 'bg-blue-100 text-blue-800' : 
                         generation.contentType === 'blog' ? 'bg-green-100 text-green-800' : 
                         generation.contentType === 'social' ? 'bg-purple-100 text-purple-800' : 
                         generation.contentType === 'email' ? 'bg-yellow-100 text-yellow-800' : 
                         generation.contentType === 'product' ? 'bg-red-100 text-red-800' : 
                         'bg-gray-100 text-gray-800' %>">
                      <%= generation.contentType.charAt(0).toUpperCase() + generation.contentType.slice(1) %>
                    </span>
                  </td>
                  <td class="px-6 py-4">
                    <div class="text-sm text-white truncate max-w-xs"><%= generation.prompt %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-white">
                      <%= generation.template ? generation.template.name : 'None' %>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <button class="view-content-btn text-neon-blue hover:text-blue-400" data-id="<%= generation._id %>">
                      <i class="fas fa-eye"></i> View
                    </button>
                  </td>
                </tr>
              <% }); %>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Content View Modal -->
<div id="content-view-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
  <div class="bg-dark-200 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
    <div class="p-4 border-b border-gray-700 flex justify-between items-center">
      <h3 class="text-lg font-semibold text-white" id="modal-title">View Generated Content</h3>
      <button id="close-modal-btn" class="text-gray-400 hover:text-white">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="p-6 overflow-y-auto max-h-[70vh]">
      <div class="mb-4">
        <h4 class="text-sm font-medium text-gray-400 mb-1">User</h4>
        <p class="text-white bg-dark-300 p-3 rounded-md" id="modal-user"></p>
      </div>
      <div class="mb-4">
        <h4 class="text-sm font-medium text-gray-400 mb-1">Prompt</h4>
        <p class="text-white bg-dark-300 p-3 rounded-md" id="modal-prompt"></p>
      </div>
      <div>
        <h4 class="text-sm font-medium text-gray-400 mb-1">Generated Content</h4>
        <div class="text-white bg-dark-300 p-3 rounded-md prose prose-invert max-w-none" id="modal-content"></div>
      </div>
    </div>
    <div class="p-4 border-t border-gray-700 flex justify-end">
      <button id="modal-copy-btn" class="bg-dark-300 hover:bg-dark-400 text-gray-300 px-4 py-2 rounded-md mr-3 transition-colors">
        <i class="fas fa-copy mr-2"></i>Copy Content
      </button>
      <button id="close-modal-btn-2" class="bg-neon-blue hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors">
        Close
      </button>
    </div>
  </div>
</div>

<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Parse the data
    const contentTypeStats = <%= JSON.stringify(contentTypeStats) %>;
    const toneStats = <%= JSON.stringify(toneStats) %>;
    const lengthStats = <%= JSON.stringify(lengthStats) %>;
    const dailyStats = <%= JSON.stringify(dailyStats) %>;
    
    // Content Type Chart
    const contentTypeCtx = document.getElementById('contentTypeChart').getContext('2d');
    const contentTypeChart = new Chart(contentTypeCtx, {
      type: 'doughnut',
      data: {
        labels: contentTypeStats.map(stat => stat._id.charAt(0).toUpperCase() + stat._id.slice(1)),
        datasets: [{
          data: contentTypeStats.map(stat => stat.count),
          backgroundColor: [
            'rgba(0, 123, 255, 0.7)',
            'rgba(40, 167, 69, 0.7)',
            'rgba(138, 43, 226, 0.7)',
            'rgba(255, 193, 7, 0.7)',
            'rgba(220, 53, 69, 0.7)',
            'rgba(108, 117, 125, 0.7)'
          ],
          borderColor: [
            'rgba(0, 123, 255, 1)',
            'rgba(40, 167, 69, 1)',
            'rgba(138, 43, 226, 1)',
            'rgba(255, 193, 7, 1)',
            'rgba(220, 53, 69, 1)',
            'rgba(108, 117, 125, 1)'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'right',
            labels: {
              color: 'rgba(255, 255, 255, 0.7)'
            }
          }
        }
      }
    });
    
    // Tone Chart
    const toneCtx = document.getElementById('toneChart').getContext('2d');
    const toneChart = new Chart(toneCtx, {
      type: 'doughnut',
      data: {
        labels: toneStats.map(stat => stat._id.charAt(0).toUpperCase() + stat._id.slice(1)),
        datasets: [{
          data: toneStats.map(stat => stat.count),
          backgroundColor: [
            'rgba(0, 242, 255, 0.7)',
            'rgba(255, 105, 180, 0.7)',
            'rgba(255, 215, 0, 0.7)',
            'rgba(50, 205, 50, 0.7)',
            'rgba(255, 69, 0, 0.7)'
          ],
          borderColor: [
            'rgba(0, 242, 255, 1)',
            'rgba(255, 105, 180, 1)',
            'rgba(255, 215, 0, 1)',
            'rgba(50, 205, 50, 1)',
            'rgba(255, 69, 0, 1)'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'right',
            labels: {
              color: 'rgba(255, 255, 255, 0.7)'
            }
          }
        }
      }
    });
    
    // Length Chart
    const lengthCtx = document.getElementById('lengthChart').getContext('2d');
    const lengthChart = new Chart(lengthCtx, {
      type: 'doughnut',
      data: {
        labels: lengthStats.map(stat => stat._id.charAt(0).toUpperCase() + stat._id.slice(1)),
        datasets: [{
          data: lengthStats.map(stat => stat.count),
          backgroundColor: [
            'rgba(138, 43, 226, 0.7)',
            'rgba(0, 242, 255, 0.7)',
            'rgba(255, 215, 0, 0.7)'
          ],
          borderColor: [
            'rgba(138, 43, 226, 1)',
            'rgba(0, 242, 255, 1)',
            'rgba(255, 215, 0, 1)'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'right',
            labels: {
              color: 'rgba(255, 255, 255, 0.7)'
            }
          }
        }
      }
    });
    
    // Usage Chart
    const usageCtx = document.getElementById('usageChart').getContext('2d');
    const usageChart = new Chart(usageCtx, {
      type: 'line',
      data: {
        labels: dailyStats.map(stat => stat.date),
        datasets: [{
          label: 'Content Generations',
          data: dailyStats.map(stat => stat.count),
          backgroundColor: 'rgba(0, 242, 255, 0.2)',
          borderColor: 'rgba(0, 242, 255, 1)',
          borderWidth: 2,
          tension: 0.4,
          fill: true
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(255, 255, 255, 0.1)'
            },
            ticks: {
              color: 'rgba(255, 255, 255, 0.7)'
            }
          },
          x: {
            grid: {
              color: 'rgba(255, 255, 255, 0.1)'
            },
            ticks: {
              color: 'rgba(255, 255, 255, 0.7)'
            }
          }
        },
        plugins: {
          legend: {
            labels: {
              color: 'rgba(255, 255, 255, 0.7)'
            }
          }
        }
      }
    });
    
    // User search functionality
    const userSearch = document.getElementById('user-search');
    const generationRows = document.querySelectorAll('.generation-row');
    
    userSearch.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      
      generationRows.forEach(row => {
        const user = row.getAttribute('data-user');
        
        if (user.includes(searchTerm)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    });
    
    // Content view modal
    const modal = document.getElementById('content-view-modal');
    const closeModalBtns = document.querySelectorAll('#close-modal-btn, #close-modal-btn-2');
    const modalUser = document.getElementById('modal-user');
    const modalPrompt = document.getElementById('modal-prompt');
    const modalContent = document.getElementById('modal-content');
    const modalCopyBtn = document.getElementById('modal-copy-btn');
    const viewContentBtns = document.querySelectorAll('.view-content-btn');
    
    // View content
    viewContentBtns.forEach(button => {
      button.addEventListener('click', async function() {
        const contentId = this.getAttribute('data-id');
        const row = this.closest('tr');
        const user = row.querySelector('td:nth-child(2)').textContent.trim();
        const prompt = row.querySelector('td:nth-child(4)').textContent.trim();
        
        // In a real implementation, you would fetch the content from the server
        // For now, we'll just use placeholder content
        modalUser.textContent = user;
        modalPrompt.textContent = prompt;
        
        // Simulate loading content
        modalContent.innerHTML = '<div class="flex justify-center"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-neon-blue"></div></div>';
        
        // Show modal
        modal.classList.remove('hidden');
        
        // Simulate API call to get content
        setTimeout(() => {
          // This would be replaced with actual content from the API
          modalContent.innerHTML = `
            <h2>Sample Generated Content</h2>
            <p>This is a sample content for the prompt: "${prompt}"</p>
            <p>In a real implementation, this would be the actual content stored in the database.</p>
            <ul>
              <li>Key point 1</li>
              <li>Key point 2</li>
              <li>Key point 3</li>
            </ul>
            <p>Thank you for using our AI Content Generator!</p>
          `;
        }, 1000);
      });
    });
    
    // Close modal
    closeModalBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        modal.classList.add('hidden');
      });
    });
    
    // Copy content
    modalCopyBtn.addEventListener('click', function() {
      const content = modalContent.innerText;
      
      // Create a temporary textarea to copy the content
      const textarea = document.createElement('textarea');
      textarea.value = content;
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand('copy');
      document.body.removeChild(textarea);
      
      // Show success message
      const originalText = modalCopyBtn.innerHTML;
      modalCopyBtn.innerHTML = '<i class="fas fa-check mr-2"></i>Copied!';
      setTimeout(() => {
        modalCopyBtn.innerHTML = originalText;
      }, 2000);
    });
  });
</script>
