<!-- Admin Content Generator Templates -->
<div class="flex flex-col md:flex-row">
  <div class="flex-grow p-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Content Templates</h1>
      <div class="flex space-x-2">
        <a href="/admin/content-generator" class="bg-dark-200 hover:bg-dark-300 text-gray-300 px-3 py-2 rounded-md text-sm transition-colors">
          <i class="fas fa-arrow-left mr-1"></i> Back to Dashboard
        </a>
        <button id="add-template-btn" class="bg-neon-blue hover:bg-blue-600 text-white px-3 py-2 rounded-md text-sm transition-colors">
          <i class="fas fa-plus mr-1"></i> Add Template
        </button>
      </div>
    </div>

    <!-- Templates Table -->
    <div class="bg-dark-100 rounded-lg border border-gray-800 overflow-hidden">
      <div class="p-4 border-b border-gray-700">
        <div class="flex justify-between items-center">
          <h2 class="text-lg font-semibold">All Templates</h2>
          <div class="flex items-center">
            <input type="text" id="template-search" placeholder="Search templates..." class="bg-dark-300 text-white border border-gray-700 rounded-md px-3 py-2 text-sm focus:outline-none focus:border-neon-blue">
          </div>
        </div>
      </div>

      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-dark-200">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Name</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Content Type</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Description</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Status</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-dark-100 divide-y divide-gray-700" id="templates-table-body">
            <% if (templates.length === 0) { %>
              <tr>
                <td colspan="5" class="px-6 py-4 text-center text-gray-400">
                  No templates found. Click "Add Template" to create your first template.
                </td>
              </tr>
            <% } else { %>
              <% templates.forEach(template => { %>
                <tr class="template-row">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-white"><%= template.name %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                      <%= template.contentType === 'website' ? 'bg-blue-100 text-blue-800' : 
                         template.contentType === 'blog' ? 'bg-green-100 text-green-800' : 
                         template.contentType === 'social' ? 'bg-purple-100 text-purple-800' : 
                         template.contentType === 'email' ? 'bg-yellow-100 text-yellow-800' : 
                         template.contentType === 'product' ? 'bg-red-100 text-red-800' : 
                         'bg-gray-100 text-gray-800' %>">
                      <%= template.contentType.charAt(0).toUpperCase() + template.contentType.slice(1) %>
                    </span>
                  </td>
                  <td class="px-6 py-4">
                    <div class="text-sm text-white truncate max-w-xs"><%= template.description %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <% if (template.active) { %>
                      <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        Active
                      </span>
                    <% } else { %>
                      <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                        Inactive
                      </span>
                    <% } %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div class="flex space-x-3">
                      <button class="text-neon-blue hover:text-blue-400 edit-template-btn" 
                              data-id="<%= template._id %>"
                              data-name="<%= template.name %>"
                              data-description="<%= template.description %>"
                              data-content-type="<%= template.contentType %>"
                              data-prefix="<%= template.promptPrefix %>"
                              data-suffix="<%= template.promptSuffix %>"
                              data-active="<%= template.active %>">
                        <i class="fas fa-edit"></i> Edit
                      </button>
                      <button class="text-red-500 hover:text-red-400 delete-template-btn" 
                              data-id="<%= template._id %>"
                              data-name="<%= template.name %>">
                        <i class="fas fa-trash-alt"></i> Delete
                      </button>
                    </div>
                  </td>
                </tr>
              <% }); %>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Add Template Modal -->
<div id="template-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
  <div class="bg-dark-200 rounded-lg shadow-xl max-w-2xl w-full">
    <div class="p-4 border-b border-gray-700 flex justify-between items-center">
      <h3 class="text-lg font-semibold text-white" id="modal-title">Add Template</h3>
      <button id="close-modal-btn" class="text-gray-400 hover:text-white">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <form id="template-form" class="p-6">
      <input type="hidden" id="template-id">
      <div class="space-y-4">
        <div>
          <label for="template-name" class="block text-gray-300 mb-1">Template Name</label>
          <input type="text" id="template-name" class="w-full bg-dark-300 border border-gray-600 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue" required>
        </div>
        
        <div>
          <label for="template-content-type" class="block text-gray-300 mb-1">Content Type</label>
          <select id="template-content-type" class="w-full bg-dark-300 border border-gray-600 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue" required>
            <option value="website">Website Content</option>
            <option value="blog">Blog Post</option>
            <option value="social">Social Media Post</option>
            <option value="email">Email Content</option>
            <option value="product">Product Description</option>
            <option value="seo">SEO Content</option>
            <option value="other">Other</option>
          </select>
        </div>
        
        <div>
          <label for="template-description" class="block text-gray-300 mb-1">Description</label>
          <textarea id="template-description" rows="2" class="w-full bg-dark-300 border border-gray-600 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue"></textarea>
        </div>
        
        <div>
          <label for="template-prefix" class="block text-gray-300 mb-1">Prompt Prefix</label>
          <textarea id="template-prefix" rows="2" class="w-full bg-dark-300 border border-gray-600 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue" placeholder="Text to add before the user's prompt"></textarea>
          <p class="text-gray-400 text-xs mt-1">This text will be added before the user's prompt</p>
        </div>
        
        <div>
          <label for="template-suffix" class="block text-gray-300 mb-1">Prompt Suffix</label>
          <textarea id="template-suffix" rows="2" class="w-full bg-dark-300 border border-gray-600 rounded-md px-3 py-2 text-white focus:outline-none focus:border-neon-blue" placeholder="Text to add after the user's prompt"></textarea>
          <p class="text-gray-400 text-xs mt-1">This text will be added after the user's prompt</p>
        </div>
        
        <div class="flex items-center">
          <input type="checkbox" id="template-active" class="mr-2">
          <label for="template-active" class="text-gray-300">Active</label>
        </div>
      </div>
      
      <div class="mt-6 flex justify-end">
        <button type="button" id="cancel-btn" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md mr-3 transition-colors">
          Cancel
        </button>
        <button type="submit" id="save-template-btn" class="bg-neon-blue hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors">
          Save Template
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const addTemplateBtn = document.getElementById('add-template-btn');
    const templateModal = document.getElementById('template-modal');
    const closeModalBtn = document.getElementById('close-modal-btn');
    const cancelBtn = document.getElementById('cancel-btn');
    const templateForm = document.getElementById('template-form');
    const modalTitle = document.getElementById('modal-title');
    const templateId = document.getElementById('template-id');
    const templateName = document.getElementById('template-name');
    const templateContentType = document.getElementById('template-content-type');
    const templateDescription = document.getElementById('template-description');
    const templatePrefix = document.getElementById('template-prefix');
    const templateSuffix = document.getElementById('template-suffix');
    const templateActive = document.getElementById('template-active');
    const saveTemplateBtn = document.getElementById('save-template-btn');
    const templateSearch = document.getElementById('template-search');
    const templateRows = document.querySelectorAll('.template-row');
    const editTemplateBtns = document.querySelectorAll('.edit-template-btn');
    const deleteTemplateBtns = document.querySelectorAll('.delete-template-btn');
    
    // Search functionality
    templateSearch.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      
      templateRows.forEach(row => {
        const name = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
        const type = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
        const description = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
        
        if (name.includes(searchTerm) || type.includes(searchTerm) || description.includes(searchTerm)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    });
    
    // Open modal for adding a template
    addTemplateBtn.addEventListener('click', function() {
      modalTitle.textContent = 'Add Template';
      templateId.value = '';
      templateForm.reset();
      templateActive.checked = true;
      templateModal.classList.remove('hidden');
    });
    
    // Close modal
    closeModalBtn.addEventListener('click', function() {
      templateModal.classList.add('hidden');
    });
    
    cancelBtn.addEventListener('click', function() {
      templateModal.classList.add('hidden');
    });
    
    // Edit template
    editTemplateBtns.forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        const name = this.getAttribute('data-name');
        const description = this.getAttribute('data-description');
        const contentType = this.getAttribute('data-content-type');
        const prefix = this.getAttribute('data-prefix');
        const suffix = this.getAttribute('data-suffix');
        const active = this.getAttribute('data-active') === 'true';
        
        modalTitle.textContent = 'Edit Template';
        templateId.value = id;
        templateName.value = name;
        templateContentType.value = contentType;
        templateDescription.value = description;
        templatePrefix.value = prefix;
        templateSuffix.value = suffix;
        templateActive.checked = active;
        
        templateModal.classList.remove('hidden');
      });
    });
    
    // Save template
    templateForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const id = templateId.value;
      const isNewTemplate = !id;
      
      const formData = {
        name: templateName.value,
        contentType: templateContentType.value,
        description: templateDescription.value,
        promptPrefix: templatePrefix.value,
        promptSuffix: templateSuffix.value,
        active: templateActive.checked ? 'on' : 'off'
      };
      
      try {
        saveTemplateBtn.disabled = true;
        saveTemplateBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Saving...';
        
        let response;
        
        if (isNewTemplate) {
          // Create new template
          response = await fetch('/admin/content-generator/templates', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
          });
        } else {
          // Update existing template
          response = await fetch(`/admin/content-generator/templates/${id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
          });
        }
        
        const data = await response.json();
        
        if (data.success) {
          // Reload the page to show the updated template list
          window.location.reload();
        } else {
          alert('Failed to save template: ' + data.message);
          saveTemplateBtn.disabled = false;
          saveTemplateBtn.innerHTML = 'Save Template';
        }
      } catch (error) {
        console.error('Error saving template:', error);
        alert('An error occurred while saving the template');
        saveTemplateBtn.disabled = false;
        saveTemplateBtn.innerHTML = 'Save Template';
      }
    });
    
    // Delete template
    deleteTemplateBtns.forEach(button => {
      button.addEventListener('click', async function() {
        const id = this.getAttribute('data-id');
        const name = this.getAttribute('data-name');
        
        if (confirm(`Are you sure you want to delete the template "${name}"? This action cannot be undone.`)) {
          try {
            const response = await fetch(`/admin/content-generator/templates/${id}`, {
              method: 'DELETE'
            });
            
            const data = await response.json();
            
            if (data.success) {
              // Reload the page to show the updated template list
              window.location.reload();
            } else {
              alert('Failed to delete template: ' + data.message);
            }
          } catch (error) {
            console.error('Error deleting template:', error);
            alert('An error occurred while deleting the template');
          }
        }
      });
    });
  });
</script>
