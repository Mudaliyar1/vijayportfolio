<!-- Admin Password Reset History -->
<div class="flex flex-col md:flex-row">
  <div class="flex-grow p-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Password Reset History</h1>
      <div class="flex space-x-2">
        <div class="flex relative">
          <input
            type="text"
            id="search-input"
            placeholder="Search by email or OTP..."
            class="bg-dark-200 border border-gray-700 rounded-l-md py-2 px-3 text-white focus:outline-none focus:border-neon-blue transition-colors"
            value="<%= search %>"
            autocomplete="off"
          />
          <div id="search-spinner" class="absolute right-12 top-1/2 transform -translate-y-1/2 hidden">
            <div class="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-neon-blue"></div>
          </div>
          <button id="search-button" class="bg-neon-blue hover:bg-blue-600 text-white px-3 py-2 rounded-r-md text-sm transition-colors">
            <i class="fas fa-search"></i>
          </button>
        </div>
      </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8 stats-cards">
      <div class="bg-dark-100 rounded-lg border border-gray-800 p-6 hover:border-neon-blue transition-colors">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold">Total Reset Attempts</h3>
          <div class="w-10 h-10 rounded-full bg-neon-blue/20 flex items-center justify-center">
            <i class="fas fa-key text-neon-blue"></i>
          </div>
        </div>
        <p class="text-3xl font-bold"><%= passwordResets.length %></p>
        <p class="text-sm text-gray-400 mt-1">Password reset attempts</p>
      </div>

      <div class="bg-dark-100 rounded-lg border border-gray-800 p-6 hover:border-neon-purple transition-colors">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold">Unique Users</h3>
          <div class="w-10 h-10 rounded-full bg-neon-purple/20 flex items-center justify-center">
            <i class="fas fa-users text-neon-purple"></i>
          </div>
        </div>
        <p class="text-3xl font-bold"><%= userResetCounts.length %></p>
        <p class="text-sm text-gray-400 mt-1">Users who requested resets</p>
      </div>
    </div>

    <!-- User Summary Table -->
    <div class="bg-dark-100 rounded-lg border border-gray-800 p-6 mb-8 table-container">
      <h2 class="text-xl font-semibold mb-4">Users Summary</h2>
      <div class="overflow-x-auto user-summary-table">
        <table class="w-full">
          <thead>
            <tr class="border-b border-gray-800">
              <th class="py-3 px-4 text-left">User</th>
              <th class="py-3 px-4 text-left">Email</th>
              <th class="py-3 px-4 text-left">Reset Attempts</th>
              <th class="py-3 px-4 text-left">Last Attempt</th>
            </tr>
          </thead>
          <tbody>
            <% if (userResetCounts.length > 0) { %>
              <% userResetCounts.forEach(userCount => { %>
                <tr class="border-b border-gray-800 hover:bg-dark-200/50 transition-colors">
                  <td class="py-3 px-4">
                    <%= userCount.user.username || 'Unknown' %>
                  </td>
                  <td class="py-3 px-4"><%= userCount.email %></td>
                  <td class="py-3 px-4">
                    <span class="px-2 py-1 rounded-full text-xs bg-neon-blue/20 text-neon-blue">
                      <%= userCount.count %>
                    </span>
                  </td>
                  <td class="py-3 px-4"><%= new Date(userCount.lastAttempt).toLocaleString() %></td>
                </tr>
              <% }); %>
            <% } else { %>
              <tr>
                <td colspan="4" class="py-4 text-center text-gray-500">No password reset attempts found</td>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Detailed Reset History -->
    <div class="bg-dark-100 rounded-lg border border-gray-800 p-6 table-container">
      <h2 class="text-xl font-semibold mb-4">Detailed Reset History</h2>
      <div class="overflow-x-auto reset-detail-table">
        <table class="w-full">
          <thead>
            <tr class="border-b border-gray-800">
              <th class="py-3 px-4 text-left">User</th>
              <th class="py-3 px-4 text-left">Email</th>
              <th class="py-3 px-4 text-left">OTP</th>
              <th class="py-3 px-4 text-left">Status</th>
              <th class="py-3 px-4 text-left">Date & Time</th>
            </tr>
          </thead>
          <tbody>
            <% if (passwordResets.length > 0) { %>
              <% passwordResets.forEach(reset => { %>
                <tr class="border-b border-gray-800 hover:bg-dark-200/50 transition-colors">
                  <td class="py-3 px-4">
                    <%= reset.userId ? reset.userId.username : 'Unknown' %>
                  </td>
                  <td class="py-3 px-4"><%= reset.email %></td>
                  <td class="py-3 px-4 font-mono"><%= reset.otp %></td>
                  <td class="py-3 px-4">
                    <% if (reset.isBlocked) { %>
                      <span class="px-2 py-1 rounded-full text-xs bg-red-900/30 text-red-400">Blocked</span>
                    <% } else if (reset.isUsed) { %>
                      <span class="px-2 py-1 rounded-full text-xs bg-green-900/30 text-green-400">Used</span>
                    <% } else { %>
                      <span class="px-2 py-1 rounded-full text-xs bg-yellow-900/30 text-yellow-400">Pending</span>
                    <% } %>
                  </td>
                  <td class="py-3 px-4"><%= new Date(reset.createdAt).toLocaleString() %></td>
                </tr>
              <% }); %>
            <% } else { %>
              <tr>
                <td colspan="5" class="py-4 text-center text-gray-500">No password reset attempts found</td>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Live Search Script -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    let isLoading = false;
    let lastSearchTerm = '<%= search %>';

    // Function to update the UI with search results
    function updateUI(html) {
      // Create a temporary div to hold the HTML
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = html;

      // Extract the tables and stats from the new HTML
      const newUserTable = tempDiv.querySelector('.user-summary-table');
      const newDetailTable = tempDiv.querySelector('.reset-detail-table');
      const newStatsCards = tempDiv.querySelector('.stats-cards');

      // Update the tables and stats in the current page
      if (newUserTable) {
        // Get the table bodies from both the current and new tables
        const currentUserTableBody = document.querySelector('.user-summary-table table tbody');
        const newUserTableBody = newUserTable.querySelector('table tbody');

        if (currentUserTableBody && newUserTableBody) {
          currentUserTableBody.innerHTML = newUserTableBody.innerHTML;
        } else {
          document.querySelector('.user-summary-table').innerHTML = newUserTable.innerHTML;
        }
      }

      if (newDetailTable) {
        // Get the table bodies from both the current and new tables
        const currentDetailTableBody = document.querySelector('.reset-detail-table table tbody');
        const newDetailTableBody = newDetailTable.querySelector('table tbody');

        if (currentDetailTableBody && newDetailTableBody) {
          currentDetailTableBody.innerHTML = newDetailTableBody.innerHTML;
        } else {
          document.querySelector('.reset-detail-table').innerHTML = newDetailTable.innerHTML;
        }
      }

      if (newStatsCards) {
        document.querySelector('.stats-cards').innerHTML = newStatsCards.innerHTML;
      }

      // Update the URL without refreshing the page
      const url = new URL(window.location);
      if (searchInput.value) {
        url.searchParams.set('search', searchInput.value);
      } else {
        url.searchParams.delete('search');
      }
      window.history.pushState({}, '', url);

      isLoading = false;
    }

    // Function to perform the search
    function performSearch() {
      if (isLoading) return;

      const searchTerm = searchInput.value.trim();

      // Don't search if the term hasn't changed
      if (searchTerm === lastSearchTerm) return;

      lastSearchTerm = searchTerm;
      isLoading = true;

      // Show loading state
      const spinner = document.getElementById('search-spinner');
      spinner.classList.remove('hidden');

      document.querySelectorAll('.table-container').forEach(container => {
        container.classList.add('opacity-50');
      });

      // Fetch the results
      fetch(`/admin/password-resets?search=${encodeURIComponent(searchTerm)}&ajax=true`)
        .then(response => response.text())
        .then(html => {
          updateUI(html);
          // Hide loading state
          spinner.classList.add('hidden');
          document.querySelectorAll('.table-container').forEach(container => {
            container.classList.remove('opacity-50');
          });
        })
        .catch(error => {
          console.error('Search error:', error);
          isLoading = false;
          // Hide loading state
          spinner.classList.add('hidden');
          document.querySelectorAll('.table-container').forEach(container => {
            container.classList.remove('opacity-50');
          });
        });
    }

    // Add event listener for input changes - this is the main live filter
    searchInput.addEventListener('input', function() {
      // Always trigger search immediately for any input change
      // Small delay to prevent too many requests while typing
      clearTimeout(this.searchTimeout);
      this.searchTimeout = setTimeout(() => {
        performSearch();
      }, 200); // Reduced delay for more responsive feel
    });

    // Add event listener for search button as a fallback
    searchButton.addEventListener('click', function() {
      performSearch();
    });

    // Add event listener for Enter key
    searchInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        performSearch();
      }
    });
  });
</script>
