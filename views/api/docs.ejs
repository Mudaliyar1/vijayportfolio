<div class="max-w-6xl mx-auto px-4 py-8">
  <div class="flex flex-col md:flex-row gap-6">
    <div class="md:w-1/4">
      <div class="sticky top-24">
        <div class="bg-dark-100 rounded-lg border border-gray-700 overflow-hidden">
          <div class="bg-gradient-to-r from-neon-blue to-neon-purple p-4">
            <h5 class="mb-0 text-white font-semibold">API Documentation</h5>
          </div>
          <div class="divide-y divide-gray-700">
            <a href="#introduction" class="block px-4 py-3 text-gray-300 hover:bg-dark-200 hover:text-white transition-colors">Introduction</a>
            <a href="#authentication" class="block px-4 py-3 text-gray-300 hover:bg-dark-200 hover:text-white transition-colors">Authentication</a>
            <a href="#rate-limits" class="block px-4 py-3 text-gray-300 hover:bg-dark-200 hover:text-white transition-colors">Rate Limits</a>
            <a href="#static-api" class="block px-4 py-3 text-gray-300 hover:bg-dark-200 hover:text-white transition-colors">Static API</a>
            <a href="#dynamic-api" class="block px-4 py-3 text-gray-300 hover:bg-dark-200 hover:text-white transition-colors">Dynamic API</a>
            <a href="#api-key-implementation" class="block px-4 py-3 text-gray-300 hover:bg-dark-200 hover:text-white transition-colors bg-dark-300 border-l-4 border-neon-blue">API Key Implementation</a>
            <a href="#error-handling" class="block px-4 py-3 text-gray-300 hover:bg-dark-200 hover:text-white transition-colors">Error Handling</a>
            <a href="#examples" class="block px-4 py-3 text-gray-300 hover:bg-dark-200 hover:text-white transition-colors">Code Examples</a>
            <a href="#best-practices" class="block px-4 py-3 text-gray-300 hover:bg-dark-200 hover:text-white transition-colors">Best Practices</a>
          </div>
        </div>

        <div class="mt-4">
          <a href="/api/developer-portal" class="px-4 py-3 rounded-md bg-gradient-to-r from-neon-blue to-neon-purple text-white hover:opacity-90 transition-opacity block text-center">
            <i class="fas fa-arrow-left mr-2"></i> Back to Developer Portal
          </a>
        </div>
      </div>
    </div>

    <div class="md:w-3/4">
      <div class="bg-dark-100 rounded-lg border border-gray-700 overflow-hidden mb-6">
        <div class="p-6">
          <section id="introduction">
            <h2 class="text-2xl font-semibold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-neon-blue to-neon-purple">Introduction</h2>
            <p class="text-gray-300 mb-4">Welcome to the FTRAISE AI API documentation. This API allows you to integrate our AI chatbot into your applications, websites, and services.</p>
            <p class="text-gray-300 mb-3">We offer two types of API keys to suit different use cases:</p>
            <ul class="list-disc list-inside text-gray-300 mb-4 pl-2">
              <li class="mb-2"><span class="text-white font-medium">Static API Key</span>: For use in HTML websites and client-side JavaScript</li>
              <li class="mb-2"><span class="text-white font-medium">Dynamic API Key</span>: For use in backend applications with higher rate limits</li>
            </ul>
            <p class="text-gray-300">To get started, <a href="/api/developer-portal" class="text-neon-blue hover:text-neon-purple transition-colors">create an API key</a> in the Developer Portal.</p>
          </section>

          <div class="border-t border-gray-700 my-6"></div>

          <section id="authentication">
            <h2 class="text-2xl font-semibold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-neon-blue to-neon-purple">Authentication</h2>
            <p class="text-gray-300 mb-4">All API requests require authentication using an API key. Include your API key in the Authorization header of your requests with the "Bearer" prefix:</p>

            <pre class="bg-dark-200 p-3 rounded-md text-gray-300 mb-4 overflow-x-auto"><code>Authorization: Bearer YOUR_API_KEY</code></pre>

            <div class="bg-yellow-900/30 border border-yellow-800 rounded-md p-4">
              <p class="text-yellow-300 mb-0">
                <i class="fas fa-exclamation-triangle mr-2"></i>
                <span class="font-medium">Important:</span> The "Bearer" prefix is required. Without it, you'll receive an "API key is missing or invalid" error.
              </p>
            </div>

            <div class="bg-yellow-900/30 border border-yellow-800 rounded-md p-4 mt-4">
              <p class="text-yellow-300 mb-0">
                <i class="fas fa-exclamation-triangle mr-2"></i>
                <span class="font-medium">Security Note:</span> Keep your API keys secure and never expose them in client-side code (except for Static API keys which are designed for this purpose).
              </p>
            </div>
          </section>

          <div class="border-t border-gray-700 my-6"></div>

          <section id="rate-limits">
            <h2 class="text-2xl font-semibold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-neon-blue to-neon-purple">Rate Limits</h2>
            <p class="text-gray-300 mb-4">Our API has rate limits to ensure fair usage and prevent abuse:</p>

            <div class="overflow-x-auto mb-6">
              <table class="min-w-full divide-y divide-gray-700 border border-gray-700 rounded-md overflow-hidden">
                <thead class="bg-dark-200">
                  <tr>
                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">API Key Type</th>
                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Rate Limit</th>
                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Window</th>
                  </tr>
                </thead>
                <tbody class="bg-dark-300 divide-y divide-gray-700">
                  <tr>
                    <td class="px-4 py-3 whitespace-nowrap text-gray-300">Static</td>
                    <td class="px-4 py-3 whitespace-nowrap text-gray-300">10 requests</td>
                    <td class="px-4 py-3 whitespace-nowrap text-gray-300">Per hour</td>
                  </tr>
                  <tr>
                    <td class="px-4 py-3 whitespace-nowrap text-gray-300">Dynamic</td>
                    <td class="px-4 py-3 whitespace-nowrap text-gray-300">50 requests</td>
                    <td class="px-4 py-3 whitespace-nowrap text-gray-300">Per hour</td>
                  </tr>
                </tbody>
              </table>
            </div>

            <p class="text-gray-300 mb-3">Rate limit information is included in the response headers:</p>
            <ul class="list-disc list-inside text-gray-300 mb-4 pl-2">
              <li class="mb-2"><code class="bg-dark-200 px-1 py-0.5 rounded text-gray-300">X-RateLimit-Limit</code>: The maximum number of requests allowed in the current window</li>
              <li class="mb-2"><code class="bg-dark-200 px-1 py-0.5 rounded text-gray-300">X-RateLimit-Remaining</code>: The number of requests remaining in the current window</li>
              <li class="mb-2"><code class="bg-dark-200 px-1 py-0.5 rounded text-gray-300">X-RateLimit-Reset</code>: The time at which the current rate limit window resets (Unix timestamp)</li>
            </ul>
          </section>

          <div class="border-t border-gray-700 my-6"></div>

          <section id="static-api">
            <h2 class="text-2xl font-semibold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-neon-blue to-neon-purple">Static API</h2>
            <p class="text-gray-300 mb-4">The Static API is designed for use in HTML websites and client-side JavaScript. It has the following characteristics:</p>
            <ul class="list-disc list-inside text-gray-300 mb-6 pl-2">
              <li class="mb-2">Limited to 10 requests per hour</li>
              <li class="mb-2">Can be restricted to specific domains or IP addresses</li>
              <li class="mb-2">Responses are sanitized to prevent abuse</li>
              <li class="mb-2">Suitable for simple integrations</li>
            </ul>

            <h4 class="text-xl font-semibold mb-2 text-white">Endpoint</h4>
            <pre class="bg-dark-200 p-3 rounded-md text-gray-300 mb-4 overflow-x-auto"><code>POST https://ftraiseai.onrender.com/api/static</code></pre>

            <h4 class="text-xl font-semibold mb-2 text-white">Request Body</h4>
            <pre class="bg-dark-200 p-3 rounded-md text-gray-300 mb-4 overflow-x-auto"><code>{
  "prompt": "Your question or prompt for the AI"
}</code></pre>

            <h4 class="text-xl font-semibold mb-2 text-white">Response</h4>
            <pre class="bg-dark-200 p-3 rounded-md text-gray-300 mb-4 overflow-x-auto"><code>{
  "success": true,
  "reply": "AI response to your prompt"
}</code></pre>
          </section>

          <div class="border-t border-gray-700 my-6"></div>

          <section id="dynamic-api">
            <h2 class="text-2xl font-semibold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-neon-blue to-neon-purple">Dynamic API</h2>
            <p class="text-gray-300 mb-4">The Dynamic API is designed for use in backend applications. It has the following characteristics:</p>
            <ul class="list-disc list-inside text-gray-300 mb-6 pl-2">
              <li class="mb-2">Higher rate limit (50 requests per hour)</li>
              <li class="mb-2">Full access to AI response</li>
              <li class="mb-2">Additional configuration options</li>
              <li class="mb-2">Suitable for more complex integrations</li>
            </ul>

            <h4 class="text-xl font-semibold mb-2 text-white">Endpoint</h4>
            <pre class="bg-dark-200 p-3 rounded-md text-gray-300 mb-4 overflow-x-auto"><code>POST https://ftraiseai.onrender.com/api/dynamic</code></pre>

            <h4 class="text-xl font-semibold mb-2 text-white">Request Body</h4>
            <pre class="bg-dark-200 p-3 rounded-md text-gray-300 mb-4 overflow-x-auto"><code>{
  "prompt": "Your question or prompt for the AI",
  "options": {
    "model": "command",
    "maxTokens": 800,
    "temperature": 0.7,
    "k": 0,
    "stopSequences": ["User:", "FTRAISE AI:"]
  }
}</code></pre>

            <p class="text-gray-300 mb-4">All options are optional and will use default values if not provided.</p>

            <h4 class="text-xl font-semibold mb-2 text-white">Response</h4>
            <pre class="bg-dark-200 p-3 rounded-md text-gray-300 mb-4 overflow-x-auto"><code>{
  "success": true,
  "reply": "AI response to your prompt",
  "metadata": {
    "model": "command",
    "tokens": 150,
    "enhanced": true
  }
}</code></pre>
          </section>

          <div class="border-t border-gray-700 my-6"></div>

          <section id="api-key-implementation">
            <h2 class="text-2xl font-semibold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-neon-blue to-neon-purple">API Key Implementation</h2>
            <p class="text-gray-300 mb-4">Follow these steps to implement your API key in your application:</p>

            <div class="bg-dark-200 rounded-lg border border-gray-700 p-6 mb-6">
              <h4 class="text-xl font-semibold mb-4 text-white">Step 1: Get Your API Key</h4>
              <p class="text-gray-300 mb-4">Create an API key in the <a href="/api/developer-portal" class="text-neon-blue hover:text-neon-purple transition-colors">Developer Portal</a>. Choose the appropriate type based on your use case:</p>
              <ul class="list-disc list-inside text-gray-300 mb-4 pl-2">
                <li class="mb-2"><span class="text-white font-medium">Static API Key</span>: For client-side applications (websites, mobile apps)</li>
                <li class="mb-2"><span class="text-white font-medium">Dynamic API Key</span>: For server-side applications (Node.js, Python, etc.)</li>
              </ul>
            </div>

            <div class="bg-dark-200 rounded-lg border border-gray-700 p-6 mb-6">
              <h4 class="text-xl font-semibold mb-4 text-white">Step 2: Add Your API Key to Your Code</h4>
              <p class="text-gray-300 mb-4">Replace <code class="bg-yellow-900/50 px-2 py-1 rounded text-yellow-300 font-mono">YOUR_API_KEY</code> in your code with your actual API key. Make sure to keep the <code class="bg-dark-300 px-2 py-1 rounded text-gray-300 font-mono">Bearer</code> prefix:</p>

              <div class="bg-dark-300 p-4 rounded-md mb-4 border border-gray-700">
                <div class="flex items-center">
                  <div class="text-red-400 mr-3"><i class="fas fa-times-circle text-xl"></i></div>
                  <div class="text-gray-300 font-mono">Authorization: YOUR_API_KEY</div>
                </div>
                <div class="flex items-center mt-2">
                  <div class="text-green-400 mr-3"><i class="fas fa-check-circle text-xl"></i></div>
                  <div class="text-gray-300 font-mono">Authorization: Bearer YOUR_API_KEY</div>
                </div>
              </div>

              <div class="mb-6">
                <h5 class="text-lg font-semibold mb-2 text-white">HTML/JavaScript Example:</h5>
                <pre class="bg-dark-300 p-4 rounded-md text-gray-300 overflow-x-auto relative"><code>&lt;script&gt;
  document.getElementById('ai-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    const prompt = document.getElementById('prompt').value;
    const res = await fetch('https://ftraiseai.onrender.com/api/static', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        <span class="bg-yellow-900/50 px-2 py-0.5 rounded text-yellow-300 font-mono">'Authorization': 'Bearer YOUR_STATIC_API_KEY'</span>
      },
      body: JSON.stringify({ prompt })
    });
    const data = await res.json();
    document.getElementById('response').innerText = data.reply;
  });
&lt;/script&gt;</code></pre>
                <div class="absolute top-2 right-2 bg-yellow-900/50 text-yellow-300 px-2 py-1 rounded-md text-xs">
                  Replace this with your API key
                </div>
              </div>

              <div>
                <h5 class="text-lg font-semibold mb-2 text-white">Node.js Example:</h5>
                <pre class="bg-dark-300 p-4 rounded-md text-gray-300 overflow-x-auto relative"><code>const fetch = require('node-fetch');

async function askAI(prompt) {
  const response = await fetch('https://ftraiseai.onrender.com/api/dynamic', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      <span class="bg-yellow-900/50 px-2 py-0.5 rounded text-yellow-300 font-mono">'Authorization': 'Bearer YOUR_DYNAMIC_API_KEY'</span>
    },
    body: JSON.stringify({
      prompt,
      options: { maxTokens: 500 }
    })
  });

  const data = await response.json();
  return data.reply;
}</code></pre>
                <div class="absolute top-2 right-2 bg-yellow-900/50 text-yellow-300 px-2 py-1 rounded-md text-xs">
                  Replace this with your API key
                </div>
              </div>
            </div>

            <div class="bg-dark-200 rounded-lg border border-gray-700 p-6 mb-6">
              <h4 class="text-xl font-semibold mb-4 text-white">Step 3: Domain Configuration</h4>
              <p class="text-gray-300 mb-4">For Static API keys, make sure to configure the allowed domains correctly:</p>

              <div class="bg-dark-300 p-4 rounded-md mb-4 border border-gray-700">
                <h5 class="text-lg font-semibold mb-2 text-white">Domain Settings</h5>
                <ul class="list-disc list-inside text-gray-300 pl-2">
                  <li class="mb-2">When creating a Static API key, specify the domains where it will be used</li>
                  <li class="mb-2">Use the format: <code class="bg-dark-400 px-2 py-1 rounded">example.com, sub.example.com</code></li>
                  <li class="mb-2">If left empty, the API key will work from any domain (not recommended)</li>
                  <li class="mb-2">For local testing, include <code class="bg-dark-400 px-2 py-1 rounded">localhost</code> in the allowed domains</li>
                </ul>
              </div>

              <div class="bg-yellow-900/20 border border-yellow-800 rounded-md p-4">
                <p class="text-yellow-300 mb-0">
                  <i class="fas fa-exclamation-triangle text-yellow-400 mr-2"></i>
                  <span class="font-medium">Important:</span> If you get a <code class="bg-dark-400 px-2 py-1 rounded">403 Forbidden</code> error, it means your domain is not in the allowed list for that API key.
                </p>
              </div>
            </div>

            <div class="bg-dark-200 rounded-lg border border-gray-700 p-6">
              <h4 class="text-xl font-semibold mb-4 text-white">Step 4: Test Your Implementation</h4>
              <p class="text-gray-300 mb-4">After adding your API key, test your implementation to ensure it works correctly:</p>
              <ul class="list-disc list-inside text-gray-300 pl-2">
                <li class="mb-2">For Static API keys, test from the domain you specified during creation</li>
                <li class="mb-2">For Dynamic API keys, test from your server environment</li>
                <li class="mb-2">Check for proper error handling and response parsing</li>
                <li class="mb-2">Use our <a href="/api-test.html" target="_blank" class="text-neon-blue hover:text-neon-purple transition-colors">API Test Tool</a> to debug any issues</li>
              </ul>

              <div class="bg-green-900/20 border border-green-800 rounded-md p-4 mt-4">
                <p class="text-green-300 mb-0">
                  <i class="fas fa-check-circle text-green-400 mr-2"></i>
                  <span class="font-medium">Success:</span> If implemented correctly, you should receive AI responses from the API.
                </p>
              </div>
            </div>
          </section>

          <div class="border-t border-gray-700 my-6"></div>

          <section id="error-handling">
            <h2 class="text-2xl font-semibold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-neon-blue to-neon-purple">Error Handling</h2>
            <p class="text-gray-300 mb-4">The API returns standard HTTP status codes to indicate success or failure:</p>
            <ul class="list-disc list-inside text-gray-300 mb-6 pl-2">
              <li class="mb-2"><code class="bg-dark-200 px-1 py-0.5 rounded text-gray-300">200 OK</code>: Request successful</li>
              <li class="mb-2"><code class="bg-dark-200 px-1 py-0.5 rounded text-gray-300">400 Bad Request</code>: Invalid request parameters</li>
              <li class="mb-2"><code class="bg-dark-200 px-1 py-0.5 rounded text-gray-300">401 Unauthorized</code>: Invalid or missing API key</li>
              <li class="mb-2"><code class="bg-dark-200 px-1 py-0.5 rounded text-gray-300">403 Forbidden</code>: API key not authorized for this domain/IP</li>
              <li class="mb-2"><code class="bg-dark-200 px-1 py-0.5 rounded text-gray-300">429 Too Many Requests</code>: Rate limit exceeded</li>
              <li class="mb-2"><code class="bg-dark-200 px-1 py-0.5 rounded text-gray-300">500 Internal Server Error</code>: Server error</li>
            </ul>

            <p class="text-gray-300 mb-4">Error responses have the following format:</p>
            <pre class="bg-dark-200 p-3 rounded-md text-gray-300 mb-4 overflow-x-auto"><code>{
  "success": false,
  "message": "Error message describing what went wrong"
}</code></pre>

            <p class="text-gray-300 mb-4">For rate limit errors, additional information is provided:</p>
            <pre class="bg-dark-200 p-3 rounded-md text-gray-300 mb-4 overflow-x-auto"><code>{
  "success": false,
  "message": "Rate limit exceeded",
  "resetAt": 1620000000,
  "timeRemaining": 3600
}</code></pre>
          </section>

          <div class="border-t border-gray-700 my-6"></div>

          <section id="examples">
            <h2 class="text-2xl font-semibold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-neon-blue to-neon-purple">Code Examples</h2>

            <h4 class="text-xl font-semibold mb-2 text-white">HTML/JavaScript (Static API)</h4>
            <pre class="bg-dark-200 p-3 rounded-md text-gray-300 mb-6 overflow-x-auto relative"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;FTRAISE AI Integration&lt;/title&gt;
  &lt;style&gt;
    body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }
    #ai-form { margin-bottom: 20px; }
    #prompt { width: 70%; padding: 8px; }
    button { padding: 8px 16px; background: #4a6cf7; color: white; border: none; cursor: pointer; }
    #response { border: 1px solid #ddd; padding: 15px; min-height: 100px; }
    .loading { opacity: 0.5; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;FTRAISE AI Chat&lt;/h1&gt;

  &lt;form id="ai-form"&gt;
    &lt;input type="text" id="prompt" placeholder="Ask AI a question..."&gt;
    &lt;button type="submit" id="submit-btn"&gt;Ask&lt;/button&gt;
  &lt;/form&gt;

  &lt;div id="response"&gt;AI response will appear here...&lt;/div&gt;

  &lt;script&gt;
    document.getElementById('ai-form').addEventListener('submit', async function(e) {
      e.preventDefault();

      const prompt = document.getElementById('prompt').value;
      const responseEl = document.getElementById('response');
      const submitBtn = document.getElementById('submit-btn');

      if (!prompt) return;

      // Show loading state
      responseEl.classList.add('loading');
      responseEl.textContent = 'Thinking...';
      submitBtn.disabled = true;

      try {
        const res = await fetch('https://ftraiseai.onrender.com/api/static', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            <span class="bg-yellow-900/50 px-2 py-0.5 rounded text-yellow-300 font-mono">'Authorization': 'Bearer YOUR_STATIC_API_KEY'</span>
          },
          body: JSON.stringify({ prompt })
        });

        const data = await res.json();

        if (data.success) {
          responseEl.textContent = data.reply;
        } else {
          responseEl.textContent = 'Error: ' + (data.message || 'Unknown error occurred');
        }
      } catch (error) {
        responseEl.textContent = 'Error: Could not connect to the API';
        console.error(error);
      } finally {
        // Reset loading state
        responseEl.classList.remove('loading');
        submitBtn.disabled = false;
      }
    });
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
            <div class="absolute top-2 right-2 bg-yellow-900/50 text-yellow-300 px-2 py-1 rounded-md text-xs">
              Copy this complete HTML file
            </div>

            <h4 class="text-xl font-semibold mb-2 text-white">Node.js (Dynamic API)</h4>
            <pre class="bg-dark-200 p-3 rounded-md text-gray-300 mb-6 overflow-x-auto relative"><code>// Save this as ftraise-ai.js
const fetch = require('node-fetch');

// FTRAISE AI API client
class FTraiseAI {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.baseUrl = 'https://ftraiseai.onrender.com/api';
  }

  async ask(prompt, options = {}) {
    try {
      const response = await fetch(`${this.baseUrl}/dynamic`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          prompt,
          options: {
            maxTokens: options.maxTokens || 500,
            temperature: options.temperature || 0.7,
            ...options
          }
        })
      });

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.message || 'Unknown error occurred');
      }

      return data.reply;
    } catch (error) {
      console.error('Error calling FTRAISE AI API:', error);
      throw error;
    }
  }
}

// Example usage
async function main() {
  // Initialize with your API key
  <span class="bg-yellow-900/50 px-2 py-0.5 rounded text-yellow-300 font-mono">const ai = new FTraiseAI('YOUR_DYNAMIC_API_KEY');</span>

  try {
    // Ask a question
    const response = await ai.ask('What is artificial intelligence?');
    console.log('AI Response:', response);

    // Ask with custom options
    const customResponse = await ai.ask('Write a short poem about technology', {
      maxTokens: 800,
      temperature: 0.9
    });
    console.log('Custom Response:', customResponse);
  } catch (error) {
    console.error('Error:', error.message);
  }
}

main();</code></pre>
            <div class="absolute top-2 right-2 bg-yellow-900/50 text-yellow-300 px-2 py-1 rounded-md text-xs">
              Copy this complete Node.js file
            </div>

            <h4 class="text-xl font-semibold mb-2 text-white">Python (Dynamic API)</h4>
            <pre class="bg-dark-200 p-3 rounded-md text-gray-300 mb-6 overflow-x-auto relative"><code># Save this as ftraise_ai.py
import requests

class FTraiseAI:
    """FTRAISE AI API client for Python"""

    def __init__(self, api_key):
        """Initialize with your API key"""
        self.api_key = api_key
        self.base_url = 'https://ftraiseai.onrender.com/api'

    def ask(self, prompt, **options):
        """
        Ask the AI a question

        Args:
            prompt (str): The question or prompt for the AI
            **options: Optional parameters like maxTokens, temperature, etc.

        Returns:
            str: The AI's response

        Raises:
            Exception: If the API request fails
        """
        url = f'{self.base_url}/dynamic'
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_key}'
        }

        # Set default options
        api_options = {
            'maxTokens': options.get('max_tokens', 500),
            'temperature': options.get('temperature', 0.7)
        }

        # Add any additional options
        for key, value in options.items():
            if key not in ['max_tokens', 'temperature']:
                api_options[key] = value

        payload = {
            'prompt': prompt,
            'options': api_options
        }

        response = requests.post(url, json=payload, headers=headers)
        data = response.json()

        if not data.get('success'):
            raise Exception(data.get('message', 'Unknown error'))

        return data['reply']


# Example usage
if __name__ == '__main__':
    # Initialize with your API key
    <span class="bg-yellow-900/50 px-2 py-0.5 rounded text-yellow-300 font-mono">ai = FTraiseAI('YOUR_DYNAMIC_API_KEY')</span>

    try:
        # Simple question
        reply = ai.ask('What is artificial intelligence?')
        print(f'AI Response: {reply}\n')

        # With custom options
        custom_reply = ai.ask(
            'Write a short poem about technology',
            max_tokens=800,
            temperature=0.9
        )
        print(f'Custom Response: {custom_reply}')
    except Exception as e:
        print(f'Error: {e}')</code></pre>
            <div class="absolute top-2 right-2 bg-yellow-900/50 text-yellow-300 px-2 py-1 rounded-md text-xs">
              Copy this complete Python file
            </div>
          </section>

          <div class="border-t border-gray-700 my-6"></div>

          <section id="best-practices">
            <h2 class="text-2xl font-semibold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-neon-blue to-neon-purple">Best Practices</h2>
            <ul class="list-disc list-inside text-gray-300 pl-2">
              <li class="mb-3"><span class="text-white font-medium">Keep API keys secure</span>: Never expose Dynamic API keys in client-side code.</li>
              <li class="mb-3"><span class="text-white font-medium">Handle rate limits gracefully</span>: Implement exponential backoff for retries.</li>
              <li class="mb-3"><span class="text-white font-medium">Validate user input</span>: Sanitize prompts before sending them to the API.</li>
              <li class="mb-3"><span class="text-white font-medium">Implement caching</span>: Cache common responses to reduce API calls.</li>
              <li class="mb-3"><span class="text-white font-medium">Use appropriate key type</span>: Use Static API keys for client-side code and Dynamic API keys for server-side code.</li>
              <li class="mb-3"><span class="text-white font-medium">Set domain restrictions</span>: For Static API keys, restrict usage to your domains.</li>
              <li class="mb-3"><span class="text-white font-medium">Monitor usage</span>: Regularly check your API key usage in the Developer Portal.</li>
            </ul>
          </section>
        </div>
      </div>
    </div>
  </div>
</div>
