<!-- FraiseAI Image Generation Page -->
<div class="max-w-6xl mx-auto">
  <div class="mb-8 text-center">
    <h1 class="text-3xl md:text-4xl font-bold mb-4 bg-gradient-to-r from-neon-blue to-neon-purple bg-clip-text text-transparent">
      FraiseAI Image Generation
    </h1>
    <p class="text-gray-300 max-w-3xl mx-auto">
      Create stunning AI-generated images from text prompts or transform your uploaded images with various artistic styles.
    </p>
  </div>

  <!-- Tabs -->
  <div class="mb-8">
    <div class="flex border-b border-gray-700">
      <button id="tab-generate" class="tab-button active py-3 px-6 border-b-2 border-neon-blue text-neon-blue font-medium">
        Generate Image
      </button>
      <button id="tab-upload" class="tab-button py-3 px-6 border-b-2 border-transparent text-gray-400 hover:text-white font-medium">
        Upload & Transform
      </button>
      <% if (user) { %>
        <button id="tab-my-images" class="tab-button py-3 px-6 border-b-2 border-transparent text-gray-400 hover:text-white font-medium">
          My Images
        </button>
      <% } %>
    </div>
  </div>

  <!-- Generate Image Tab Content -->
  <div id="content-generate" class="tab-content">
    <% if (!user) { %>
      <!-- Guest User Warning -->
      <div class="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4 mb-6">
        <div class="flex items-start">
          <div class="flex-shrink-0">
            <i class="fas fa-exclamation-triangle text-yellow-500 mt-1"></i>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-yellow-500">Guest Access Limited</h3>
            <div class="mt-1 text-sm text-gray-300">
              <p>Guest users cannot generate images. Please <a href="/users/login" class="text-neon-blue hover:underline">login</a> or <a href="/users/register" class="text-neon-blue hover:underline">register</a> to use the image generation feature.</p>
            </div>
          </div>
        </div>
      </div>
    <% } else if (rateLimit.remaining === 0 && rateLimit.cooldown) { %>
      <!-- Rate Limited User -->
      <div class="bg-blue-600/10 border border-blue-600/30 rounded-lg p-4 mb-6">
        <div class="flex items-start">
          <div class="flex-shrink-0">
            <i class="fas fa-hourglass-half text-blue-500 mt-1"></i>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-blue-500">Rate Limit Reached</h3>
            <div class="mt-1 text-sm text-gray-300">
              <p>You can generate only <%= rateLimit.limit %> image<%= rateLimit.limit > 1 ? 's' : '' %> per 2 minutes. Please wait for the cooldown to end.</p>
              <div class="mt-2 p-2 bg-dark-300 rounded-lg inline-flex items-center">
                <i class="fas fa-clock text-blue-500 mr-2"></i>
                <span>You can generate another image in: <span id="header-countdown" class="font-bold text-blue-500 ml-1">calculating...</span></span>
              </div>

              <div class="mt-3 text-sm">
                <p class="text-gray-400 mb-1">Need more image generation capacity?</p>
                <a href="/rate-limits/request" class="text-blue-500 hover:underline flex items-center">
                  <i class="fas fa-arrow-up mr-1"></i> Request a rate limit increase
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    <% } else if (rateLimit.remaining > 0) { %>
      <!-- User with available requests -->
      <div class="bg-green-600/10 border border-green-600/30 rounded-lg p-4 mb-6">
        <div class="flex items-start">
          <div class="flex-shrink-0">
            <i class="fas fa-check-circle text-green-500 mt-1"></i>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-green-500">Ready to Generate</h3>
            <div class="mt-1 text-sm text-gray-300">
              <p>You can generate <%= rateLimit.remaining %> more image<%= rateLimit.remaining > 1 ? 's' : '' %> in the current 2-minute window.</p>
            </div>
          </div>
        </div>
      </div>
    <% } %>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <!-- Input Form -->
      <div class="bg-dark-200 rounded-xl p-6 border border-gray-700">
        <h2 class="text-xl font-semibold mb-4">Create with Text Prompt</h2>

        <form id="generate-form" class="space-y-4">
          <div>
            <label for="prompt" class="block text-gray-300 mb-2">Describe your image</label>
            <textarea
              id="prompt"
              name="prompt"
              rows="4"
              class="w-full bg-dark-300 border border-gray-700 rounded-lg py-3 px-4 text-white focus:outline-none focus:border-neon-blue transition-colors resize-none"
              placeholder="E.g., A futuristic cityscape with flying cars and neon lights"
              required
            ></textarea>
          </div>

          <div>
            <label class="block text-gray-300 mb-2">Reference Image (Optional)</label>
            <div class="border-2 border-dashed border-gray-700 rounded-lg p-4 text-center" id="reference-drop-area">
              <input
                type="file"
                id="reference-image"
                name="reference-image"
                class="hidden"
                accept="image/*"
              >
              <div id="reference-placeholder">
                <i class="fas fa-image text-2xl text-gray-500 mb-2"></i>
                <p class="text-gray-400 text-sm">Add a reference image to guide the AI</p>
                <button
                  type="button"
                  id="reference-browse-button"
                  class="mt-2 bg-dark-300 text-white py-1 px-4 rounded-lg hover:bg-dark-400 transition-colors text-sm"
                >
                  Browse Files
                </button>
              </div>
              <div id="reference-preview" class="hidden">
                <img id="reference-preview-image" src="" alt="Reference" class="max-h-[100px] mx-auto mb-2">
                <button
                  type="button"
                  id="remove-reference"
                  class="text-sm text-red-400 hover:underline"
                >
                  Remove Image
                </button>
              </div>
            </div>
          </div>

          <div>
            <label for="style" class="block text-gray-300 mb-2">Choose a style</label>
            <select
              id="style"
              name="style"
              class="w-full bg-dark-300 border border-gray-700 rounded-lg py-3 px-4 text-white focus:outline-none focus:border-neon-blue transition-colors"
            >
              <option value="ghibli">Studio Ghibli</option>
              <option value="pixar">Pixar</option>
              <option value="anime">Anime</option>
              <option value="cyberpunk">Cyberpunk</option>
              <option value="fantasy">Fantasy</option>
              <option value="trending">Trending on Instagram</option>
              <option value="futuristic">Futuristic</option>
            </select>
          </div>

          <div class="text-right">
            <button
              type="submit"
              id="generate-button"
              class="bg-gradient-to-r from-neon-blue to-neon-purple text-white py-2 px-6 rounded-lg font-medium hover:opacity-90 transition-opacity flex items-center <%= !user || (rateLimit.remaining === 0 && rateLimit.cooldown) ? 'opacity-50 cursor-not-allowed' : '' %>"
              <%= !user || (rateLimit.remaining === 0 && rateLimit.cooldown) ? 'disabled' : '' %>
              data-remaining="<%= rateLimit.remaining %>"
              data-limit="<%= rateLimit.limit %>"
            >
              <span>Generate Image</span>
              <i class="fas fa-magic ml-2"></i>
            </button>
          </div>
        </form>
      </div>

      <!-- Preview Area -->
      <div class="bg-dark-200 rounded-xl p-6 border border-gray-700">
        <h2 class="text-xl font-semibold mb-4">Preview</h2>

        <div id="generate-preview" class="flex flex-col items-center justify-center min-h-[300px]">
          <div id="generate-placeholder" class="text-center text-gray-500">
            <i class="fas fa-image text-5xl mb-4"></i>
            <p>Your generated image will appear here</p>
          </div>

          <div id="generate-loading" class="text-center hidden">
            <div class="inline-block w-16 h-16 border-4 border-neon-blue/30 border-t-neon-blue rounded-full animate-spin mb-4"></div>
            <p class="text-neon-blue mb-2">Creating AI-generated image for you...</p>
            <p class="text-gray-400 text-sm">This may take up to 30 seconds</p>

            <!-- Progress bar with percentage -->
            <div class="mt-4 w-full max-w-md mx-auto">
              <div class="flex justify-between mb-1">
                <span id="progress-status" class="text-xs text-gray-400">Starting AI models...</span>
                <span id="progress-percentage" class="text-xs text-neon-blue">0%</span>
              </div>
              <div class="w-full bg-dark-300 rounded-full h-2.5 overflow-hidden">
                <div id="progress-bar" class="bg-gradient-to-r from-neon-blue to-neon-purple h-2.5 rounded-full transition-all duration-300 ease-out" style="width: 0%"></div>
              </div>
            </div>

            <!-- AI model stages -->
            <div class="mt-6 grid grid-cols-3 gap-2 max-w-md mx-auto">
              <div id="stage-prompt" class="p-2 rounded-lg bg-dark-300 border border-dark-200 text-xs">
                <div class="w-4 h-4 rounded-full bg-gray-600 mx-auto mb-1 transition-colors duration-300" id="stage-prompt-indicator"></div>
                <span>Analyzing Prompt</span>
              </div>
              <div id="stage-generation" class="p-2 rounded-lg bg-dark-300 border border-dark-200 text-xs">
                <div class="w-4 h-4 rounded-full bg-gray-600 mx-auto mb-1 transition-colors duration-300" id="stage-generation-indicator"></div>
                <span>AI Generation</span>
              </div>
              <div id="stage-enhancement" class="p-2 rounded-lg bg-dark-300 border border-dark-200 text-xs">
                <div class="w-4 h-4 rounded-full bg-gray-600 mx-auto mb-1 transition-colors duration-300" id="stage-enhancement-indicator"></div>
                <span>Processing Image</span>
              </div>
            </div>

            <!-- Preview placeholder -->
            <div id="preview-container" class="mt-6 max-w-md mx-auto hidden">
              <p class="text-xs text-gray-400 mb-2">Preview (AI is generating your image...)</p>
              <div class="relative w-full h-48 bg-dark-300 rounded-lg overflow-hidden">
                <div id="preview-image" class="absolute inset-0 bg-center bg-cover filter blur-md transition-all duration-500"></div>
                <div class="absolute inset-0 flex items-center justify-center">
                  <div class="w-8 h-8 border-4 border-neon-blue/30 border-t-neon-blue rounded-full animate-spin"></div>
                </div>
              </div>
            </div>
          </div>

          <div id="generate-result" class="w-full hidden">
            <div id="result-with-reference" class="hidden mb-4">
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <p class="text-center text-gray-400 mb-2">Reference</p>
                  <img id="result-reference-image" src="" alt="Reference image" class="w-full h-auto rounded-lg">
                </div>
                <div>
                  <p class="text-center text-gray-400 mb-2">Generated</p>
                  <img id="generated-image" src="" alt="Generated image" class="w-full h-auto rounded-lg">
                </div>
              </div>
            </div>

            <div id="result-without-reference" class="hidden mb-4">
              <img id="generated-image-solo" src="" alt="Generated image" class="w-full h-auto rounded-lg">
            </div>

            <div class="flex justify-between items-center">
              <div>
                <span id="generated-style" class="inline-block bg-dark-300 text-neon-blue text-xs px-2 py-1 rounded-full"></span>
              </div>
              <button id="download-generated" class="text-gray-400 hover:text-white">
                <i class="fas fa-download"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Upload & Transform Tab Content -->
  <div id="content-upload" class="tab-content hidden">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <!-- Upload Form -->
      <div class="bg-dark-200 rounded-xl p-6 border border-gray-700">
        <h2 class="text-xl font-semibold mb-4">Upload Your Image</h2>

        <form id="upload-form" class="space-y-4">
          <div>
            <label for="image" class="block text-gray-300 mb-2">Select an image to upload</label>
            <div class="border-2 border-dashed border-gray-700 rounded-lg p-6 text-center" id="drop-area">
              <input
                type="file"
                id="image"
                name="image"
                class="hidden"
                accept="image/*"
                required
              >
              <div id="upload-placeholder">
                <i class="fas fa-cloud-upload-alt text-3xl text-gray-500 mb-2"></i>
                <p class="text-gray-400">Drag & drop your image here or</p>
                <button
                  type="button"
                  id="browse-button"
                  class="mt-2 bg-dark-300 text-white py-1 px-4 rounded-lg hover:bg-dark-400 transition-colors"
                >
                  Browse Files
                </button>
              </div>
              <div id="upload-preview" class="hidden">
                <img id="preview-image" src="" alt="Preview" class="max-h-[200px] mx-auto mb-2">
                <p id="file-name" class="text-sm text-gray-400 truncate"></p>
                <button
                  type="button"
                  id="change-image"
                  class="mt-2 text-sm text-neon-blue hover:underline"
                >
                  Change Image
                </button>
              </div>
            </div>
          </div>

          <div class="text-right">
            <button
              type="submit"
              id="upload-button"
              class="bg-gradient-to-r from-neon-blue to-neon-purple text-white py-2 px-6 rounded-lg font-medium hover:opacity-90 transition-opacity flex items-center"
            >
              <span>Upload Image</span>
              <i class="fas fa-upload ml-2"></i>
            </button>
          </div>
        </form>
      </div>

      <!-- Transform Area -->
      <div class="bg-dark-200 rounded-xl p-6 border border-gray-700">
        <h2 class="text-xl font-semibold mb-4">Transform Your Image</h2>

        <div id="transform-area" class="flex flex-col items-center justify-center min-h-[300px]">
          <div id="transform-placeholder" class="text-center text-gray-500">
            <i class="fas fa-wand-magic-sparkles text-5xl mb-4"></i>
            <p>Upload an image first to transform it</p>
          </div>

          <div id="transform-content" class="w-full hidden">
            <div class="mb-4">
              <label for="transform-style" class="block text-gray-300 mb-2">Choose a transformation style</label>
              <select
                id="transform-style"
                name="transform-style"
                class="w-full bg-dark-300 border border-gray-700 rounded-lg py-3 px-4 text-white focus:outline-none focus:border-neon-blue transition-colors"
              >
                <option value="ghibli">Studio Ghibli</option>
                <option value="pixar">Pixar</option>
                <option value="anime">Anime</option>
                <option value="cyberpunk">Cyberpunk</option>
                <option value="fantasy">Fantasy</option>
                <option value="trending">Trending on Instagram</option>
                <option value="futuristic">Futuristic</option>
              </select>
            </div>

            <div class="text-center">
              <button
                id="transform-button"
                class="bg-gradient-to-r from-neon-blue to-neon-purple text-white py-2 px-6 rounded-lg font-medium hover:opacity-90 transition-opacity flex items-center mx-auto"
              >
                <span>Transform Image</span>
                <i class="fas fa-wand-magic-sparkles ml-2"></i>
              </button>
            </div>

            <div id="transform-result" class="mt-6 hidden">
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <p class="text-center text-gray-400 mb-2">Original</p>
                  <div class="relative group">
                    <img id="original-image" src="" alt="Original image" class="w-full h-auto rounded-lg">
                    <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center rounded-lg">
                      <a id="view-original" href="#" target="_blank" class="text-white bg-neon-blue px-3 py-1.5 rounded-lg hover:bg-blue-600 transition-colors">
                        <i class="fas fa-eye mr-1"></i> View
                      </a>
                    </div>
                  </div>
                </div>
                <div>
                  <p class="text-center text-gray-400 mb-2">Transformed</p>
                  <div class="relative group">
                    <img id="transformed-image" src="" alt="Transformed image" class="w-full h-auto rounded-lg">
                    <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center rounded-lg">
                      <a id="view-transformed" href="#" target="_blank" class="text-white bg-neon-blue px-3 py-1.5 rounded-lg hover:bg-blue-600 transition-colors">
                        <i class="fas fa-eye mr-1"></i> View
                      </a>
                    </div>
                  </div>
                </div>
              </div>
              <div class="mt-4 flex justify-end space-x-3">
                <button id="download-transformed" class="text-gray-400 hover:text-white flex items-center">
                  <i class="fas fa-download mr-1"></i> Download
                </button>
              </div>
            </div>
          </div>

          <div id="transform-loading" class="text-center hidden">
            <div class="inline-block w-16 h-16 border-4 border-neon-blue/30 border-t-neon-blue rounded-full animate-spin mb-4"></div>
            <p class="text-neon-blue">Transforming your image...</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- My Images Tab Content -->
  <div id="content-my-images" class="tab-content hidden">
    <div class="bg-dark-200 rounded-xl p-6 border border-gray-700 mb-6">
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-4">
        <h2 class="text-xl font-semibold">My Images</h2>

        <div class="flex flex-wrap gap-2 mt-3 md:mt-0">
          <!-- Filter buttons -->
          <div class="relative">
            <button id="filter-dropdown-btn" class="bg-dark-300 hover:bg-dark-400 text-white py-2 px-4 rounded-lg flex items-center">
              <i class="fas fa-filter mr-2"></i> Filter
              <i class="fas fa-chevron-down ml-2"></i>
            </button>
            <div id="filter-dropdown" class="absolute right-0 mt-2 w-48 bg-dark-300 border border-gray-700 rounded-lg shadow-lg z-10 hidden">
              <div class="p-3">
                <div class="mb-2">
                  <label class="inline-flex items-center">
                    <input type="checkbox" id="filter-all" class="form-checkbox bg-dark-400 border-gray-600 rounded" checked>
                    <span class="ml-2 text-white">All Images</span>
                  </label>
                </div>
                <div class="mb-2">
                  <label class="inline-flex items-center">
                    <input type="checkbox" id="filter-uploaded" class="form-checkbox bg-dark-400 border-gray-600 rounded">
                    <span class="ml-2 text-white">Uploaded</span>
                  </label>
                </div>
                <div class="mb-2">
                  <label class="inline-flex items-center">
                    <input type="checkbox" id="filter-generated" class="form-checkbox bg-dark-400 border-gray-600 rounded">
                    <span class="ml-2 text-white">AI Generated</span>
                  </label>
                </div>
                <div class="mb-2">
                  <label class="inline-flex items-center">
                    <input type="checkbox" id="filter-transformed" class="form-checkbox bg-dark-400 border-gray-600 rounded">
                    <span class="ml-2 text-white">Transformed</span>
                  </label>
                </div>
              </div>
            </div>
          </div>

          <!-- Search input -->
          <div class="relative">
            <input type="text" id="image-search" placeholder="Search images..." class="bg-dark-300 border border-gray-700 rounded-lg py-2 pl-10 pr-4 text-white focus:outline-none focus:border-neon-blue transition-colors w-full md:w-auto">
            <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500"></i>
          </div>
        </div>
      </div>

      <!-- Tabs for Uploaded and AI Generated -->
      <div class="mb-4 border-b border-gray-700">
        <div class="flex">
          <button id="tab-all-images" class="py-2 px-4 text-white border-b-2 border-neon-blue font-medium">All Images</button>
          <button id="tab-uploaded-images" class="py-2 px-4 text-gray-400 hover:text-white border-b-2 border-transparent">Uploaded</button>
          <button id="tab-ai-images" class="py-2 px-4 text-gray-400 hover:text-white border-b-2 border-transparent">AI Generated</button>
        </div>
      </div>

      <!-- Images container -->
      <div id="my-images-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        <div class="text-center text-gray-500 py-8 col-span-full">
          <i class="fas fa-spinner fa-spin text-3xl mb-4"></i>
          <p>Loading your images...</p>
        </div>
      </div>

      <!-- Load more button -->
      <div id="load-more-container" class="mt-6 text-center hidden">
        <button id="load-more-btn" class="bg-dark-300 hover:bg-dark-400 text-white py-2 px-6 rounded-lg">
          Load More
        </button>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="delete-image-modal" class="fixed inset-0 bg-black/70 flex items-center justify-center z-50 hidden">
    <div class="bg-dark-100 rounded-lg border border-gray-800 p-6 max-w-md w-full mx-4 relative">
      <button id="close-delete-modal" class="absolute top-3 right-3 text-gray-400 hover:text-white">
        <i class="fas fa-times"></i>
      </button>

      <div class="text-center mb-6">
        <div class="inline-block p-3 bg-red-500/20 rounded-full mb-4">
          <i class="fas fa-exclamation-triangle text-red-500 text-2xl"></i>
        </div>
        <h3 class="text-xl font-semibold mb-2">Delete Image</h3>
        <p class="text-gray-300">Are you sure you want to delete this image? This action cannot be undone.</p>
      </div>

      <div class="flex justify-end space-x-3">
        <button id="cancel-delete-image" class="py-2 px-4 bg-dark-300 text-white rounded-md hover:bg-dark-400 transition-colors">
          Cancel
        </button>
        <button id="confirm-delete-image" class="py-2 px-4 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">
          Delete
        </button>
      </div>
    </div>
  </div>

  <!-- Rate Limit Modal -->
  <div id="rate-limit-modal" class="fixed inset-0 bg-black/70 flex items-center justify-center z-50 hidden">
    <div class="bg-dark-100 rounded-lg border border-gray-800 p-6 max-w-md w-full mx-4 relative">
      <button id="close-modal" class="absolute top-3 right-3 text-gray-400 hover:text-white">
        <i class="fas fa-times"></i>
      </button>

      <div class="text-center mb-6">
        <div class="inline-block p-3 bg-yellow-500/20 rounded-full mb-4">
          <i class="fas fa-exclamation-triangle text-yellow-500 text-2xl"></i>
        </div>
        <h3 class="text-xl font-semibold mb-2">Request Limit Reached</h3>
        <p id="rate-limit-message" class="text-gray-300">You've reached the limit for image generation requests.</p>
        <p class="text-sm text-gray-400 mt-2">Need more capacity? <a href="/rate-limits/request" class="text-blue-500 hover:underline">Request a rate limit increase</a></p>
      </div>

      <div id="guest-limit-actions" class="flex flex-col space-y-3 hidden">
        <a href="/users/login" class="py-2 px-4 bg-neon-blue text-white rounded-md text-center hover:bg-neon-blue/90 transition-colors">
          Login to Your Account
        </a>
        <a href="/users/register" class="py-2 px-4 border border-neon-blue text-white rounded-md text-center hover:bg-neon-blue/10 transition-colors">
          Create New Account
        </a>
      </div>

      <div id="user-limit-timer" class="hidden">
        <div class="bg-dark-200 p-3 rounded-md text-center">
          <p class="text-gray-300 mb-2">You can generate images again in:</p>
          <p id="countdown-timer" class="text-2xl font-bold text-neon-blue">00:00</p>

          <div class="mt-4 text-center">
            <p class="text-gray-400 text-sm mb-2">Need more image generation capacity?</p>
            <a href="/rate-limits/request" class="text-blue-500 hover:underline inline-flex items-center">
              <i class="fas fa-arrow-up mr-1"></i> Request a rate limit increase
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize header countdown if needed
    const headerCountdown = document.getElementById('header-countdown');
    if (headerCountdown && <%= rateLimit.cooldown ? 'true' : 'false' %>) {
      startCountdownTimer(<%= rateLimit.cooldown || 0 %>, headerCountdown);
      console.log('Initialized countdown timer with cooldown: <%= rateLimit.cooldown %>');
    }
    // Tab switching
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove active class from all buttons
        tabButtons.forEach(btn => {
          btn.classList.remove('active');
          btn.classList.remove('text-neon-blue');
          btn.classList.remove('border-neon-blue');
          btn.classList.add('text-gray-400');
          btn.classList.add('border-transparent');
        });

        // Add active class to clicked button
        button.classList.add('active');
        button.classList.add('text-neon-blue');
        button.classList.add('border-neon-blue');
        button.classList.remove('text-gray-400');
        button.classList.remove('border-transparent');

        // Hide all tab contents
        tabContents.forEach(content => {
          content.classList.add('hidden');
        });

        // Show corresponding tab content
        const contentId = 'content-' + button.id.split('-')[1];
        document.getElementById(contentId).classList.remove('hidden');

        // Load my images if that tab is selected
        if (contentId === 'content-my-images') {
          loadMyImages();
        }
      });
    });

    // Generate image form
    const generateForm = document.getElementById('generate-form');
    const generateButton = document.getElementById('generate-button');
    const generatePlaceholder = document.getElementById('generate-placeholder');
    const generateLoading = document.getElementById('generate-loading');
    const generateResult = document.getElementById('generate-result');
    const generatedImage = document.getElementById('generated-image');
    const generatedStyle = document.getElementById('generated-style');
    const downloadGenerated = document.getElementById('download-generated');

    // Handle reference image selection
    const referenceImage = document.getElementById('reference-image');
    const referenceBrowseButton = document.getElementById('reference-browse-button');
    const referencePlaceholder = document.getElementById('reference-placeholder');
    const referencePreview = document.getElementById('reference-preview');
    const referencePreviewImage = document.getElementById('reference-preview-image');
    const removeReference = document.getElementById('remove-reference');
    const referenceDropArea = document.getElementById('reference-drop-area');

    // Handle reference image selection
    referenceImage.addEventListener('change', () => {
      const file = referenceImage.files[0];
      if (file) {
        referencePreviewImage.src = URL.createObjectURL(file);
        referencePlaceholder.classList.add('hidden');
        referencePreview.classList.remove('hidden');
      }
    });

    // Handle reference browse button
    referenceBrowseButton.addEventListener('click', () => {
      referenceImage.click();
    });

    // Handle remove reference button
    removeReference.addEventListener('click', () => {
      referenceImage.value = '';
      referencePlaceholder.classList.remove('hidden');
      referencePreview.classList.add('hidden');
    });

    // Handle reference drag and drop
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      referenceDropArea.addEventListener(eventName, preventDefaults, false);
    });

    ['dragenter', 'dragover'].forEach(eventName => {
      referenceDropArea.addEventListener(eventName, () => {
        referenceDropArea.classList.add('border-neon-blue');
      }, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      referenceDropArea.addEventListener(eventName, () => {
        referenceDropArea.classList.remove('border-neon-blue');
      }, false);
    });

    referenceDropArea.addEventListener('drop', (e) => {
      const dt = e.dataTransfer;
      const files = dt.files;

      if (files.length > 0) {
        referenceImage.files = files;
        const file = files[0];
        referencePreviewImage.src = URL.createObjectURL(file);
        referencePlaceholder.classList.add('hidden');
        referencePreview.classList.remove('hidden');
      }
    }, false);

    // Form submission with reference image
    generateForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const prompt = document.getElementById('prompt').value;
      const style = document.getElementById('style').value;
      const referenceFile = referenceImage.files[0];

      // Get remaining requests from button data attribute
      const remaining = parseInt(generateButton.dataset.remaining);
      const limit = parseInt(generateButton.dataset.limit);

      // Show loading state
      generateButton.disabled = true;
      generatePlaceholder.classList.add('hidden');
      generateResult.classList.add('hidden');
      generateLoading.classList.remove('hidden');

      // Reset progress UI
      const progressBar = document.getElementById('progress-bar');
      const progressPercentage = document.getElementById('progress-percentage');
      const progressStatus = document.getElementById('progress-status');
      const previewContainer = document.getElementById('preview-container');

      // Reset stage indicators
      document.getElementById('stage-prompt-indicator').style.backgroundColor = 'rgb(75, 85, 99)';
      document.getElementById('stage-generation-indicator').style.backgroundColor = 'rgb(75, 85, 99)';
      document.getElementById('stage-enhancement-indicator').style.backgroundColor = 'rgb(75, 85, 99)';

      // Hide preview initially
      previewContainer.classList.add('hidden');

      // Initialize progress
      progressBar.style.width = '0%';
      progressPercentage.textContent = '0%';
      progressStatus.textContent = 'Analyzing your prompt...';

      // Start progress animation
      let progress = 0;
      let currentStage = 0;
      const stages = [
        { name: 'prompt', end: 20, status: 'Analyzing your prompt...', indicator: 'stage-prompt-indicator' },
        { name: 'ai', end: 75, status: 'Generating with AI...', indicator: 'stage-generation-indicator' },
        { name: 'processing', end: 95, status: 'Processing image...', indicator: 'stage-enhancement-indicator' }
      ];

      const progressInterval = setInterval(() => {
        // Determine current stage
        if (progress < stages[0].end) {
          currentStage = 0;
        } else if (progress < stages[1].end) {
          currentStage = 1;
          // Show preview after generation starts
          if (progress > 30 && previewContainer.classList.contains('hidden')) {
            previewContainer.classList.remove('hidden');
            // Set a blurry preview background based on prompt analysis
            const previewImage = document.getElementById('preview-image');

            // Analyze prompt to find the best preview image
            const promptLower = prompt.toLowerCase();

            // Check for common subjects in the prompt
            const previewImages = {
              dog: 'https://cdn.pixabay.com/photo/2016/12/13/05/15/puppy-1903313_1280.jpg',
              cat: 'https://cdn.pixabay.com/photo/2014/11/30/14/11/cat-551554_1280.jpg',
              bird: 'https://cdn.pixabay.com/photo/2017/02/07/16/47/kingfisher-2046453_1280.jpg',
              fish: 'https://cdn.pixabay.com/photo/2016/12/31/21/22/discus-fish-1943755_1280.jpg',
              car: 'https://cdn.pixabay.com/photo/2015/05/28/23/12/auto-788747_1280.jpg',
              house: 'https://cdn.pixabay.com/photo/2016/11/18/17/46/house-1836070_1280.jpg',
              tree: 'https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885_1280.jpg',
              flower: 'https://cdn.pixabay.com/photo/2015/04/19/08/32/marguerite-729510_1280.jpg',
              mountain: 'https://cdn.pixabay.com/photo/2016/05/05/02/37/sunset-1373171_1280.jpg',
              beach: 'https://cdn.pixabay.com/photo/2017/03/27/14/49/beach-2179183_1280.jpg',
              city: 'https://cdn.pixabay.com/photo/2016/11/29/09/16/architecture-1868667_1280.jpg',
              person: 'https://cdn.pixabay.com/photo/2017/08/01/08/29/people-2563491_1280.jpg',
              woman: 'https://cdn.pixabay.com/photo/2018/01/15/07/51/woman-3083383_1280.jpg',
              man: 'https://cdn.pixabay.com/photo/2016/11/21/12/42/beard-1845166_1280.jpg',
              child: 'https://cdn.pixabay.com/photo/2016/11/14/03/16/children-1822688_1280.jpg',
              food: 'https://cdn.pixabay.com/photo/2017/03/23/19/57/asparagus-2169305_1280.jpg',
              robot: 'https://cdn.pixabay.com/photo/2019/02/10/14/11/robot-3987019_1280.jpg',
              space: 'https://cdn.pixabay.com/photo/2016/10/20/18/35/earth-1756274_1280.jpg'
            };

            // Style-specific preview images
            const styleImages = {
              ghibli: 'https://cdn.pixabay.com/photo/2019/08/01/12/36/illustration-4377408_1280.png',
              anime: 'https://cdn.pixabay.com/photo/2016/12/14/12/30/girl-1906187_1280.jpg',
              cyberpunk: 'https://cdn.pixabay.com/photo/2019/03/15/10/31/city-4056761_1280.jpg',
              fantasy: 'https://cdn.pixabay.com/photo/2017/09/12/11/56/universe-2742113_1280.jpg',
              trending: 'https://cdn.pixabay.com/photo/2017/08/30/01/05/milky-way-2695569_1280.jpg',
              futuristic: 'https://cdn.pixabay.com/photo/2017/01/18/08/25/social-media-1989152_1280.jpg',
              pixar: 'https://cdn.pixabay.com/photo/2016/11/18/17/46/house-1836070_1280.jpg'
            };

            // First check if any subject keywords match
            let foundSubjectMatch = false;
            for (const [subject, url] of Object.entries(previewImages)) {
              if (promptLower.includes(subject)) {
                previewImage.style.backgroundImage = `url(${url})`;
                foundSubjectMatch = true;
                break;
              }
            }

            // If no subject match, use style-based preview
            if (!foundSubjectMatch) {
              const styleImage = styleImages[style.toLowerCase()] || `https://source.unsplash.com/300x200/?${encodeURIComponent(prompt)}`;
              previewImage.style.backgroundImage = `url(${styleImage})`;
            }

            // Add animation to the preview
            previewImage.style.animation = 'pulse 2s infinite';

            // Add a loading text overlay with shimmer effect
            const loadingOverlay = document.createElement('div');
            loadingOverlay.className = 'absolute inset-0 flex items-center justify-center bg-black/30';
            loadingOverlay.innerHTML = '<p class="text-white text-sm shimmer-text">AI is working on your image...</p>';
            previewContainer.appendChild(loadingOverlay);

            // Add shimmer effect to the preview container
            previewContainer.classList.add('shimmer-container');
          }
        } else {
          currentStage = 2;
        }

        // Update stage indicators
        for (let i = 0; i <= currentStage; i++) {
          document.getElementById(stages[i].indicator).style.backgroundColor = i === currentStage ? '#3b82f6' : '#10b981';
        }

        // Update status text
        progressStatus.textContent = stages[currentStage].status;

        // Increase progress based on current stage
        if (currentStage === 0) {
          progress += 0.8;
        } else if (currentStage === 1) {
          progress += 0.4;
        } else {
          progress += 0.1;
        }

        // Cap progress at the current stage's end value
        if (progress > stages[currentStage].end) {
          progress = stages[currentStage].end;
        }

        // Update progress bar and percentage
        progressBar.style.width = `${progress}%`;
        progressPercentage.textContent = `${Math.round(progress)}%`;
      }, 200);

      try {
        // Create form data to handle file upload
        const formData = new FormData();
        formData.append('prompt', prompt);
        formData.append('style', style);
        if (referenceFile) {
          formData.append('referenceImage', referenceFile);
        }

        const response = await fetch('/images/generate', {
          method: 'POST',
          body: formData
        });

        const data = await response.json();

        if (response.status === 429) {
          // Rate limit reached
          clearInterval(progressInterval);
          showRateLimitModal(data);
          generateLoading.classList.add('hidden');
          generatePlaceholder.classList.remove('hidden');
        } else if (!data.success) {
          // Error with retry option
          clearInterval(progressInterval);

          // Create a custom error message with retry button
          const errorContainer = document.createElement('div');
          errorContainer.className = 'p-6 bg-dark-200 rounded-lg border border-red-500/30 text-center';

          const errorIcon = document.createElement('div');
          errorIcon.className = 'w-16 h-16 mx-auto mb-4 text-red-500';
          errorIcon.innerHTML = '<i class="fas fa-exclamation-circle text-4xl"></i>';

          const errorTitle = document.createElement('h3');
          errorTitle.className = 'text-xl font-medium text-white mb-2';
          errorTitle.textContent = 'Image Generation Failed';

          const errorMessage = document.createElement('p');
          errorMessage.className = 'text-gray-300 mb-4';
          errorMessage.textContent = data.message || 'An error occurred while generating the image';

          const retryButton = document.createElement('button');
          retryButton.className = 'px-4 py-2 bg-neon-blue text-white rounded-lg hover:bg-blue-600 transition-colors';
          retryButton.innerHTML = '<i class="fas fa-redo mr-2"></i> Try Again';
          retryButton.onclick = function() {
            // Remove error container and try again
            generatePlaceholder.innerHTML = '';
            document.getElementById('generate-form').dispatchEvent(new Event('submit'));
          };

          // If there's a retry timer, add countdown
          if (data.canRetry && data.retryAfter) {
            const countdownSpan = document.createElement('span');
            countdownSpan.className = 'ml-2 text-gray-400';
            countdownSpan.textContent = `(${data.retryAfter}s)`;
            retryButton.appendChild(countdownSpan);

            // Disable button initially
            retryButton.disabled = true;

            // Start countdown
            let countdown = data.retryAfter;
            const countdownInterval = setInterval(() => {
              countdown--;
              if (countdown <= 0) {
                clearInterval(countdownInterval);
                retryButton.disabled = false;
                countdownSpan.textContent = '';
              } else {
                countdownSpan.textContent = `(${countdown}s)`;
              }
            }, 1000);
          }

          // Assemble error container
          errorContainer.appendChild(errorIcon);
          errorContainer.appendChild(errorTitle);
          errorContainer.appendChild(errorMessage);
          errorContainer.appendChild(retryButton);

          // Show error container
          generateLoading.classList.add('hidden');
          generatePlaceholder.innerHTML = '';
          generatePlaceholder.appendChild(errorContainer);
          generatePlaceholder.classList.remove('hidden');
        } else {
          // Success - complete the progress animation
          clearInterval(progressInterval);

          // Set progress to 100%
          progressBar.style.width = '100%';
          progressPercentage.textContent = '100%';
          progressStatus.textContent = 'Image found successfully!';

          // Update all stage indicators to complete
          document.getElementById('stage-prompt-indicator').style.backgroundColor = '#10b981';
          document.getElementById('stage-generation-indicator').style.backgroundColor = '#10b981';
          document.getElementById('stage-enhancement-indicator').style.backgroundColor = '#10b981';

          if (referenceFile) {
            // Show side-by-side comparison with reference
            document.getElementById('result-reference-image').src = URL.createObjectURL(referenceFile);
            generatedImage.src = data.image.path;
            document.getElementById('result-with-reference').classList.remove('hidden');
            document.getElementById('result-without-reference').classList.add('hidden');

            // Log the image path for debugging
            console.log('Generated image path (with reference):', data.image.path);
          } else {
            // Show only generated image
            document.getElementById('generated-image-solo').src = data.image.path;
            document.getElementById('result-without-reference').classList.remove('hidden');
            document.getElementById('result-with-reference').classList.add('hidden');

            // Log the image path for debugging
            console.log('Generated image path (without reference):', data.image.path);
          }

          // Add error handling for image loading
          const handleImageError = (img) => {
            console.error('Image failed to load:', img.src);
            img.onerror = null; // Prevent infinite error loop
            img.src = 'https://cdn.pixabay.com/photo/2016/11/29/05/45/astronomy-1867616_1280.jpg'; // Fallback image
            alert('The generated image could not be loaded. A fallback image has been displayed instead.');
          };

          // Add error handlers to images
          generatedImage.onerror = () => handleImageError(generatedImage);
          document.getElementById('generated-image-solo').onerror = () => handleImageError(document.getElementById('generated-image-solo'));

          // Check if we're rate limited after this request
          if (data.isRateLimited) {
            // Show rate limit message
            const headerCountdown = document.getElementById('header-countdown');
            if (headerCountdown) {
              startCountdownTimer(data.cooldownEndTime, headerCountdown);

              // Show the rate limit message at the top
              const rateLimitMessage = document.querySelector('.bg-blue-600\\/10');
              if (rateLimitMessage && rateLimitMessage.classList.contains('hidden')) {
                rateLimitMessage.classList.remove('hidden');

                // Update the message to indicate this is for image generation
                const messageTitle = rateLimitMessage.querySelector('.font-medium');
                if (messageTitle) {
                  messageTitle.textContent = 'Image Generation Rate Limit';
                }

                const messageText = rateLimitMessage.querySelector('p.text-sm');
                if (messageText) {
                  messageText.textContent = `You've reached your limit of ${data.currentLimit || 1} image generation requests in 2 minutes. Please wait for the cooldown to end.`;
                }
              }
            }
          }

          generatedStyle.textContent = data.image.style;

          // Add loading indicators to images
          const generateResultDiv = document.getElementById('generate-result');
          generateResultDiv.classList.add('loading-image');

          const allImages = document.querySelectorAll('#generate-result img');
          allImages.forEach(img => {
            // Add loading class
            img.classList.add('image-loading');

            // Add load event listener
            img.onload = () => {
              img.classList.remove('image-loading');
              console.log('Image loaded successfully:', img.src);

              // Check if all images are loaded
              const stillLoading = document.querySelectorAll('#generate-result img.image-loading').length > 0;
              if (!stillLoading) {
                generateResultDiv.classList.remove('loading-image');
              }
            };
          });

          // Show result
          generateLoading.classList.add('hidden');
          generateResult.classList.remove('hidden');

          // Set up download button
          downloadGenerated.onclick = () => {
            const imgSrc = referenceFile ? generatedImage.src : document.getElementById('generated-image-solo').src;
            downloadImage(imgSrc, `fraiseai-${data.image.style}-${Date.now()}.jpg`);
          };
        }
      } catch (err) {
        console.error('Error generating image:', err);

        // Clear the progress interval
        clearInterval(progressInterval);

        // Set progress to error state
        progressBar.style.width = '100%';
        progressBar.classList.remove('bg-gradient-to-r', 'from-neon-blue', 'to-neon-purple');
        progressBar.classList.add('bg-red-500');
        progressPercentage.textContent = 'Error';
        progressStatus.textContent = 'Image generation failed';

        // Update stage indicators to show error
        document.getElementById('stage-prompt-indicator').style.backgroundColor = '#10b981';
        document.getElementById('stage-generation-indicator').style.backgroundColor = '#ef4444';
        document.getElementById('stage-enhancement-indicator').style.backgroundColor = 'rgb(75, 85, 99)';

        // Create a custom error message with retry button
        const errorContainer = document.createElement('div');
        errorContainer.className = 'p-6 bg-dark-200 rounded-lg border border-red-500/30 text-center';

        const errorIcon = document.createElement('div');
        errorIcon.className = 'w-16 h-16 mx-auto mb-4 text-red-500';
        errorIcon.innerHTML = '<i class="fas fa-exclamation-circle text-4xl"></i>';

        const errorTitle = document.createElement('h3');
        errorTitle.className = 'text-xl font-medium text-white mb-2';
        errorTitle.textContent = 'Image Generation Failed';

        const errorMessage = document.createElement('p');
        errorMessage.className = 'text-gray-300 mb-4';
        errorMessage.textContent = 'The image generation service encountered an error. Please try again.';

        const retryButton = document.createElement('button');
        retryButton.className = 'px-4 py-2 bg-neon-blue text-white rounded-lg hover:bg-blue-600 transition-colors';
        retryButton.innerHTML = '<i class="fas fa-redo mr-2"></i> Try Again';
        retryButton.onclick = function() {
          // Remove error container and try again
          generatePlaceholder.innerHTML = '';
          document.getElementById('generate-form').dispatchEvent(new Event('submit'));
        };

        // Assemble error container
        errorContainer.appendChild(errorIcon);
        errorContainer.appendChild(errorTitle);
        errorContainer.appendChild(errorMessage);
        errorContainer.appendChild(retryButton);

        // Show error container
        generateLoading.classList.add('hidden');
        generatePlaceholder.innerHTML = '';
        generatePlaceholder.appendChild(errorContainer);
        generatePlaceholder.classList.remove('hidden');
      } finally {
        generateButton.disabled = false;
      }
    });

    // Upload image form
    const uploadForm = document.getElementById('upload-form');
    const uploadButton = document.getElementById('upload-button');
    const dropArea = document.getElementById('drop-area');
    const browseButton = document.getElementById('browse-button');
    const imageInput = document.getElementById('image');
    const uploadPlaceholder = document.getElementById('upload-placeholder');
    const uploadPreview = document.getElementById('upload-preview');
    const previewImage = document.getElementById('preview-image');
    const fileName = document.getElementById('file-name');
    const changeImage = document.getElementById('change-image');

    // Handle file selection
    imageInput.addEventListener('change', () => {
      const file = imageInput.files[0];
      if (file) {
        previewImage.src = URL.createObjectURL(file);
        fileName.textContent = file.name;
        uploadPlaceholder.classList.add('hidden');
        uploadPreview.classList.remove('hidden');
      }
    });

    // Handle browse button
    browseButton.addEventListener('click', () => {
      imageInput.click();
    });

    // Handle change image button
    changeImage.addEventListener('click', () => {
      imageInput.value = '';
      uploadPlaceholder.classList.remove('hidden');
      uploadPreview.classList.add('hidden');
    });

    // Handle drag and drop
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
      dropArea.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, unhighlight, false);
    });

    function highlight() {
      dropArea.classList.add('border-neon-blue');
    }

    function unhighlight() {
      dropArea.classList.remove('border-neon-blue');
    }

    dropArea.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;

      if (files.length > 0) {
        imageInput.files = files;
        const file = files[0];
        previewImage.src = URL.createObjectURL(file);
        fileName.textContent = file.name;
        uploadPlaceholder.classList.add('hidden');
        uploadPreview.classList.remove('hidden');
      }
    }

    // Handle upload form submission
    uploadForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      if (!imageInput.files[0]) {
        alert('Please select an image to upload');
        return;
      }

      // Create form data
      const formData = new FormData();
      formData.append('image', imageInput.files[0]);

      // Show loading state
      uploadButton.disabled = true;
      uploadButton.innerHTML = '<span>Uploading...</span><i class="fas fa-spinner fa-spin ml-2"></i>';

      try {
        const response = await fetch('/images/upload', {
          method: 'POST',
          body: formData
        });

        const data = await response.json();

        if (response.status === 429) {
          // Rate limit reached
          showRateLimitModal(data);
        } else if (!data.success) {
          // Error
          alert(data.message);
        } else {
          // Success - show transform area
          document.getElementById('transform-placeholder').classList.add('hidden');
          document.getElementById('transform-content').classList.remove('hidden');
          document.getElementById('original-image').src = data.image.path;

          // Store the image ID for transformation
          document.getElementById('transform-button').dataset.imageId = data.image.id;

          // Reset upload form
          uploadForm.reset();
          uploadPlaceholder.classList.remove('hidden');
          uploadPreview.classList.add('hidden');
        }
      } catch (err) {
        console.error('Error uploading image:', err);

        // Create a more user-friendly error message
        const errorMessage = document.createElement('div');
        errorMessage.className = 'bg-red-900/30 border border-red-500/50 rounded-lg p-4 mt-4 text-center';
        errorMessage.innerHTML = `
          <i class="fas fa-exclamation-circle text-red-500 text-xl mb-2"></i>
          <p class="text-white mb-2">An error occurred while uploading the image.</p>
          <p class="text-gray-400 text-sm">Please check your internet connection and try again.</p>
          <button class="mt-3 px-4 py-1 bg-red-500/30 hover:bg-red-500/50 rounded-lg text-white text-sm transition-colors">
            Try Again
          </button>
        `;

        // Add the error message to the form
        uploadForm.appendChild(errorMessage);

        // Add event listener to the try again button
        errorMessage.querySelector('button').addEventListener('click', () => {
          errorMessage.remove();
        });

        // Remove the error message after 10 seconds
        setTimeout(() => {
          if (errorMessage.parentNode) {
            errorMessage.remove();
          }
        }, 10000);
      } finally {
        uploadButton.disabled = false;
        uploadButton.innerHTML = '<span>Upload Image</span><i class="fas fa-upload ml-2"></i>';
      }
    });

    // Transform image
    const transformButton = document.getElementById('transform-button');
    const transformLoading = document.getElementById('transform-loading');
    const transformContent = document.getElementById('transform-content');
    const transformResult = document.getElementById('transform-result');
    const transformedImage = document.getElementById('transformed-image');
    const downloadTransformed = document.getElementById('download-transformed');

    transformButton.addEventListener('click', async () => {
      const imageId = transformButton.dataset.imageId;
      const style = document.getElementById('transform-style').value;

      if (!imageId) {
        alert('Please upload an image first');
        return;
      }

      // Show loading state
      transformButton.disabled = true;
      transformContent.classList.add('hidden');
      transformLoading.classList.remove('hidden');

      try {
        const response = await fetch('/images/transform', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ imageId, style })
        });

        const data = await response.json();

        if (response.status === 429) {
          // Rate limit reached
          showRateLimitModal(data);
          transformLoading.classList.add('hidden');
          transformContent.classList.remove('hidden');
        } else if (!data.success) {
          // Error - show a more user-friendly error message
          transformLoading.classList.add('hidden');
          transformContent.classList.remove('hidden');

          // Create a custom error message with retry button
          const errorMessage = document.createElement('div');
          errorMessage.className = 'bg-red-900/30 border border-red-500/50 rounded-lg p-4 mt-4 text-center';
          errorMessage.innerHTML = `
            <i class="fas fa-exclamation-circle text-red-500 text-xl mb-2"></i>
            <p class="text-white mb-2">${data.message || 'An error occurred while transforming the image'}</p>
            <p class="text-gray-400 text-sm">Please try a different style or try again later.</p>
            <button class="mt-3 px-4 py-1 bg-red-500/30 hover:bg-red-500/50 rounded-lg text-white text-sm transition-colors">
              Try Again
            </button>
          `;

          // Add the error message after the transform content
          transformContent.parentNode.insertBefore(errorMessage, transformContent.nextSibling);

          // Add event listener to the try again button
          errorMessage.querySelector('button').addEventListener('click', () => {
            errorMessage.remove();
          });

          // Remove the error message after 10 seconds
          setTimeout(() => {
            if (errorMessage.parentNode) {
              errorMessage.remove();
            }
          }, 10000);
        } else {
          // Success
          // Set the image sources
          const originalImage = document.getElementById('original-image');
          const transformedImage = document.getElementById('transformed-image');
          const viewOriginal = document.getElementById('view-original');
          const viewTransformed = document.getElementById('view-transformed');

          // Set original image if available
          if (data.originalImage && data.originalImage.path) {
            // Add loading indicator inside the image container
            const originalContainer = originalImage.parentNode;
            const originalLoader = document.createElement('div');
            originalLoader.className = 'absolute inset-0 flex items-center justify-center bg-dark-300/70';
            originalLoader.innerHTML = '<div class="w-8 h-8 border-2 border-neon-blue/30 border-t-neon-blue rounded-full animate-spin"></div>';
            originalContainer.appendChild(originalLoader);

            // Set up onload event to remove loader when image is loaded
            originalImage.onload = function() {
              if (originalLoader.parentNode) {
                originalLoader.parentNode.removeChild(originalLoader);
              }
            };

            originalImage.src = data.originalImage.path;
            viewOriginal.href = data.originalImage.path;
          }

          // Set transformed image with loading indicator
          const transformedContainer = transformedImage.parentNode;
          const transformedLoader = document.createElement('div');
          transformedLoader.className = 'absolute inset-0 flex items-center justify-center bg-dark-300/70';
          transformedLoader.innerHTML = '<div class="w-8 h-8 border-2 border-neon-blue/30 border-t-neon-blue rounded-full animate-spin"></div>';
          transformedContainer.appendChild(transformedLoader);

          // Set up onload event to remove loader when image is loaded
          transformedImage.onload = function() {
            if (transformedLoader.parentNode) {
              transformedLoader.parentNode.removeChild(transformedLoader);
            }
          };

          transformedImage.src = data.image.path;
          viewTransformed.href = data.image.path;

          // Hide main loading and show result
          transformLoading.classList.add('hidden');
          transformContent.classList.remove('hidden');
          transformResult.classList.remove('hidden');

          // Set up download button
          downloadTransformed.onclick = () => {
            downloadImage(data.image.path, `fraiseai-transformed-${data.image.style}-${Date.now()}.jpg`);
          };
        }
      } catch (err) {
        console.error('Error transforming image:', err);

        // Hide loading state
        transformLoading.classList.add('hidden');
        transformContent.classList.remove('hidden');

        // Create a more user-friendly error message
        const errorMessage = document.createElement('div');
        errorMessage.className = 'bg-red-900/30 border border-red-500/50 rounded-lg p-4 mt-4 text-center';
        errorMessage.innerHTML = `
          <i class="fas fa-exclamation-circle text-red-500 text-xl mb-2"></i>
          <p class="text-white mb-2">An error occurred while transforming the image.</p>
          <p class="text-gray-400 text-sm">Please try a different style or try again later.</p>
          <button class="mt-3 px-4 py-1 bg-red-500/30 hover:bg-red-500/50 rounded-lg text-white text-sm transition-colors">
            Dismiss
          </button>
        `;

        // Add the error message after the transform content
        transformContent.parentNode.insertBefore(errorMessage, transformContent.nextSibling);

        // Add event listener to the dismiss button
        errorMessage.querySelector('button').addEventListener('click', () => {
          errorMessage.remove();
        });

        // Remove the error message after 10 seconds
        setTimeout(() => {
          if (errorMessage.parentNode) {
            errorMessage.remove();
          }
        }, 10000);
      } finally {
        transformButton.disabled = false;
      }
    });

    // Global variables for image filtering and pagination
    let allImages = [];
    let filteredImages = [];
    let currentPage = 1;
    let imagesPerPage = 12;
    let currentFilter = 'all';
    let searchQuery = '';

    // Load my images with filtering and pagination
    async function loadMyImages() {
      const myImagesContainer = document.getElementById('my-images-container');
      const loadMoreContainer = document.getElementById('load-more-container');

      // Show loading state
      myImagesContainer.innerHTML = `
        <div class="text-center text-gray-500 py-8 col-span-full">
          <i class="fas fa-spinner fa-spin text-3xl mb-4"></i>
          <p>Loading your images...</p>
        </div>
      `;

      try {
        const response = await fetch('/images/my-images/data');
        const data = await response.json();

        if (!data.success) {
          myImagesContainer.innerHTML = `
            <div class="text-center text-gray-500 py-8 col-span-full">
              <i class="fas fa-exclamation-circle text-3xl mb-4"></i>
              <p>${data.message}</p>
            </div>
          `;
          loadMoreContainer.classList.add('hidden');
          return;
        }

        // Store all images globally
        allImages = data.images;

        if (allImages.length === 0) {
          myImagesContainer.innerHTML = `
            <div class="text-center text-gray-500 py-8 col-span-full">
              <i class="fas fa-image text-3xl mb-4"></i>
              <p>You haven't created any images yet</p>
            </div>
          `;
          loadMoreContainer.classList.add('hidden');
          return;
        }

        // Apply initial filtering
        applyFilters();

      } catch (err) {
        console.error('Error loading images:', err);
        myImagesContainer.innerHTML = `
          <div class="text-center text-gray-500 py-8 col-span-full">
            <i class="fas fa-exclamation-circle text-3xl mb-4"></i>
            <p>An error occurred while loading your images</p>
          </div>
        `;
        loadMoreContainer.classList.add('hidden');
      }
    }

    // Apply filters and render images
    function applyFilters() {
      const myImagesContainer = document.getElementById('my-images-container');
      const loadMoreContainer = document.getElementById('load-more-container');

      // Filter images based on current filter and search query
      filteredImages = allImages.filter(image => {
        // Filter by type
        if (currentFilter !== 'all' && image.type !== currentFilter) {
          return false;
        }

        // Filter by search query
        if (searchQuery && searchQuery.length > 0) {
          const query = searchQuery.toLowerCase();
          const prompt = (image.prompt || '').toLowerCase();
          const type = (image.type || '').toLowerCase();
          const style = (image.style || '').toLowerCase();

          return prompt.includes(query) || type.includes(query) || style.includes(query);
        }

        return true;
      });

      // Check if we have any images after filtering
      if (filteredImages.length === 0) {
        myImagesContainer.innerHTML = `
          <div class="text-center text-gray-500 py-8 col-span-full">
            <i class="fas fa-search text-3xl mb-4"></i>
            <p>No images match your filters</p>
          </div>
        `;
        loadMoreContainer.classList.add('hidden');
        return;
      }

      // Calculate pagination
      const totalPages = Math.ceil(filteredImages.length / imagesPerPage);
      const startIndex = (currentPage - 1) * imagesPerPage;
      const endIndex = Math.min(startIndex + imagesPerPage, filteredImages.length);
      const currentImages = filteredImages.slice(startIndex, endIndex);

      // Render images
      myImagesContainer.innerHTML = currentImages.map(image => {
        let imageDisplay = '';
        let imageType = '';

        // Determine image type label
        if (image.type === 'uploaded') {
          imageType = 'Uploaded';
        } else if (image.type === 'generated') {
          imageType = image.style ? `AI ${image.style}` : 'AI Generated';
        } else if (image.type === 'transformed') {
          imageType = `Transformed ${image.style || ''}`;
        }

        if (image.type === 'generated' && image.referenceImagePath) {
          // Show split view for images with references
          imageDisplay = `
            <div class="relative group">
              <div class="absolute inset-0 flex">
                <div class="w-1/2 h-48 overflow-hidden">
                  <div class="absolute inset-0 flex items-center justify-center bg-dark-300/70 ref-loader">
                    <div class="w-6 h-6 border-2 border-neon-blue/30 border-t-neon-blue rounded-full animate-spin"></div>
                  </div>
                  <img src="${image.referenceImagePath}" alt="Reference" class="w-full h-full object-cover opacity-80" onload="this.parentNode.querySelector('.ref-loader').style.display='none'">
                  <div class="absolute top-2 left-2 bg-dark-300/80 backdrop-blur-sm text-xs px-2 py-1 rounded-full text-gray-300">Ref</div>
                </div>
                <div class="w-1/2 h-48 overflow-hidden">
                  <div class="absolute inset-0 flex items-center justify-center bg-dark-300/70 gen-loader">
                    <div class="w-6 h-6 border-2 border-neon-blue/30 border-t-neon-blue rounded-full animate-spin"></div>
                  </div>
                  <img src="${image.path}" alt="Generated" class="w-full h-full object-cover" onload="this.parentNode.querySelector('.gen-loader').style.display='none'">
                </div>
              </div>
              <img src="${image.path}" alt="Image" class="w-full h-48 object-cover opacity-0"> <!-- Invisible placeholder for height -->
              <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                <a href="${image.path}" target="_blank" class="text-white bg-neon-blue px-3 py-1.5 rounded-lg hover:bg-blue-600 transition-colors">
                  <i class="fas fa-eye mr-1"></i> View
                </a>
              </div>
            </div>
          `;
        } else {
          // Regular image display with view button on hover and loading indicator
          imageDisplay = `
            <div class="relative group">
              <div class="absolute inset-0 flex items-center justify-center bg-dark-300/70 img-loader">
                <div class="w-8 h-8 border-2 border-neon-blue/30 border-t-neon-blue rounded-full animate-spin"></div>
              </div>
              <img src="${image.path}" alt="Image" class="w-full h-48 object-cover" onload="this.parentNode.querySelector('.img-loader').style.display='none'">
              <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                <a href="${image.path}" target="_blank" class="text-white bg-neon-blue px-3 py-1.5 rounded-lg hover:bg-blue-600 transition-colors">
                  <i class="fas fa-eye mr-1"></i> View
                </a>
              </div>
            </div>
          `;
        }

        return `
          <div class="bg-dark-300 rounded-lg overflow-hidden image-card" data-type="${image.type}">
            ${imageDisplay}
            <div class="p-3">
              <div class="flex justify-between items-center">
                <span class="text-xs text-gray-400">${new Date(image.createdAt).toLocaleDateString()}</span>
                <span class="inline-block bg-dark-400 text-neon-blue text-xs px-2 py-0.5 rounded-full">
                  ${imageType}
                  ${image.referenceImagePath ? '<i class="fas fa-images ml-1 text-xs"></i>' : ''}
                </span>
              </div>
              ${image.prompt ? `<p class="text-sm text-gray-300 mt-2 truncate" title="${image.prompt}">${image.prompt}</p>` : ''}
              <div class="mt-3 flex justify-between">
                <button class="text-red-400 hover:text-red-300 delete-image-btn" data-id="${image._id}">
                  <i class="fas fa-trash-alt"></i>
                </button>
                <button class="text-gray-400 hover:text-white" onclick="downloadImage('${image.path}', 'fraiseai-${image.type}-${Date.now()}.jpg')">
                  <i class="fas fa-download"></i>
                </button>
              </div>
            </div>
          </div>
        `;
      }).join('');

      // Show/hide load more button
      if (endIndex < filteredImages.length) {
        loadMoreContainer.classList.remove('hidden');
      } else {
        loadMoreContainer.classList.add('hidden');
      }

      // Add event listeners to delete buttons
      document.querySelectorAll('.delete-image-btn').forEach(button => {
        button.addEventListener('click', () => {
          const imageId = button.dataset.id;
          showDeleteImageModal(imageId);
        });
      });
    }

    // Delete image modal
    const deleteImageModal = document.getElementById('delete-image-modal');
    const closeDeleteModal = document.getElementById('close-delete-modal');
    const cancelDeleteImage = document.getElementById('cancel-delete-image');
    const confirmDeleteImage = document.getElementById('confirm-delete-image');
    let currentImageId = null;

    function showDeleteImageModal(imageId) {
      currentImageId = imageId;
      deleteImageModal.classList.remove('hidden');
    }

    function hideDeleteImageModal() {
      deleteImageModal.classList.add('hidden');
      currentImageId = null;
    }

    closeDeleteModal.addEventListener('click', hideDeleteImageModal);
    cancelDeleteImage.addEventListener('click', hideDeleteImageModal);

    confirmDeleteImage.addEventListener('click', async () => {
      if (!currentImageId) return;

      try {
        const response = await fetch(`/images/my-images/${currentImageId}`, {
          method: 'DELETE'
        });

        const data = await response.json();

        if (data.success) {
          // Reload images
          loadMyImages();
          // Show success message
          alert('Image deleted successfully');
        } else {
          alert(data.message);
        }
      } catch (err) {
        console.error('Error deleting image:', err);
        alert('An error occurred while deleting the image');
      } finally {
        hideDeleteImageModal();
      }
    });

    // Rate limit modal
    const rateLimitModal = document.getElementById('rate-limit-modal');
    const closeModal = document.getElementById('close-modal');
    const guestLimitActions = document.getElementById('guest-limit-actions');
    const userLimitTimer = document.getElementById('user-limit-timer');
    const countdownTimer = document.getElementById('countdown-timer');

    function showRateLimitModal(data) {
      const rateLimitMessage = document.getElementById('rate-limit-message');
      rateLimitMessage.textContent = data.message;

      if (data.isGuest) {
        guestLimitActions.classList.remove('hidden');
        userLimitTimer.classList.add('hidden');
      } else {
        guestLimitActions.classList.add('hidden');
        userLimitTimer.classList.remove('hidden');

        // Start countdown timer
        startCountdownTimer(data.cooldownEndTime);
      }

      rateLimitModal.classList.remove('hidden');
    }

    closeModal.addEventListener('click', () => {
      rateLimitModal.classList.add('hidden');
    });

    // Countdown timer
    function startCountdownTimer(endTime, targetElement = countdownTimer) {
      const updateTimer = () => {
        const now = new Date().getTime();
        const timeRemaining = endTime - now;

        if (timeRemaining <= 0) {
          targetElement.textContent = '00:00';
          // If this is the header countdown, reload the page to reset the form
          if (targetElement.id === 'header-countdown') {
            window.location.reload();
          }
          return;
        }

        const minutes = Math.floor(timeRemaining / (1000 * 60));
        const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);

        targetElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

        setTimeout(updateTimer, 1000);
      };

      updateTimer();
    }

    // Download image helper
    window.downloadImage = function(src, filename) {
      const a = document.createElement('a');
      a.href = src;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    };
  });

  // Advanced client-side AI image generation using multiple AI services
  async function generateAIImage(prompt, style) {
    try {
      // Only try client-side AI generation if the browser supports it
      if (window.fetch) {
        // Show a message that we're trying AI generation
        const progressStatus = document.getElementById('progress-status');
        if (progressStatus) {
          progressStatus.textContent = 'Analyzing prompt with AI...';
        }

        // Advanced prompt enhancement system (similar to server-side but simplified for client)
        // First, analyze the prompt to identify key subjects
        const promptLower = prompt.toLowerCase();
        const subjects = {
          animals: ['dog', 'cat', 'bird', 'fish', 'horse', 'lion', 'tiger', 'elephant', 'wolf', 'fox', 'bear', 'rabbit'],
          nature: ['mountain', 'forest', 'river', 'ocean', 'beach', 'sky', 'sunset', 'landscape', 'tree', 'flower', 'garden'],
          people: ['person', 'man', 'woman', 'child', 'girl', 'boy', 'people', 'face', 'portrait'],
          urban: ['city', 'building', 'street', 'architecture', 'skyline', 'urban', 'house', 'interior'],
          fantasy: ['dragon', 'wizard', 'magic', 'castle', 'fantasy', 'mythical', 'creature', 'fairy', 'elf'],
          scifi: ['robot', 'spaceship', 'alien', 'futuristic', 'space', 'planet', 'galaxy', 'cyberpunk', 'tech'],
          abstract: ['abstract', 'pattern', 'geometric', 'colorful', 'minimalist', 'surreal', 'dream']
        };

        // Identify the main subject category
        let mainCategory = 'general';
        for (const [category, keywords] of Object.entries(subjects)) {
          for (const keyword of keywords) {
            if (promptLower.includes(keyword)) {
              mainCategory = category;
              console.log(`Client detected subject category: ${category} (keyword: ${keyword})`);
              break;
            }
          }
          if (mainCategory !== 'general') break;
        }

        // Create a base enhanced prompt with subject-specific enhancements
        let enhancedPrompt = prompt;

        // Add subject-specific enhancements
        const subjectEnhancements = {
          animals: 'detailed fur texture, natural habitat, realistic anatomy, professional wildlife photography',
          nature: 'beautiful lighting, atmospheric, detailed textures, professional landscape photography',
          people: 'detailed features, expressive, professional portrait, perfect lighting, photorealistic',
          urban: 'architectural details, perfect perspective, professional photography, dramatic lighting',
          fantasy: 'detailed fantasy art, magical atmosphere, dramatic lighting, concept art, digital painting',
          scifi: 'futuristic details, advanced technology, dramatic lighting, concept art, digital painting',
          abstract: 'vibrant colors, perfect composition, artistic, creative, professional art'
        };

        // Add subject enhancements if a category was detected
        if (mainCategory !== 'general' && subjectEnhancements[mainCategory]) {
          enhancedPrompt = `${prompt}, ${subjectEnhancements[mainCategory]}`;
        }

        // Now add style-specific modifiers
        switch(style.toLowerCase()) {
          case 'ghibli':
            enhancedPrompt = `${enhancedPrompt}, Studio Ghibli style, anime, Hayao Miyazaki, fantasy landscape, colorful, dreamy, detailed illustration, artistic, hand-drawn animation`;
            break;
          case 'pixar':
            enhancedPrompt = `${enhancedPrompt}, Pixar animation style, 3D rendered, character design, vibrant colors, high detail, cinematic lighting, Disney Pixar, expressive characters`;
            break;
          case 'anime':
            enhancedPrompt = `${enhancedPrompt}, anime style, manga illustration, detailed, vibrant colors, Japanese animation, anime art, character design, clean lines, expressive eyes`;
            break;
          case 'cyberpunk':
            enhancedPrompt = `${enhancedPrompt}, cyberpunk style, neon lights, futuristic city, dark atmosphere, rain, high tech, low life, detailed, Blade Runner, cybernetic enhancements`;
            break;
          case 'fantasy':
            enhancedPrompt = `${enhancedPrompt}, fantasy art, magical, medieval, detailed landscape, mystical atmosphere, dramatic lighting, high quality, fantasy illustration, epic scene`;
            break;
          case 'trending':
            enhancedPrompt = `${enhancedPrompt}, trending on artstation, highly detailed, professional photography, sharp focus, dramatic lighting, artistic, popular, award-winning`;
            break;
          case 'futuristic':
            enhancedPrompt = `${enhancedPrompt}, futuristic, sci-fi, advanced technology, sleek design, holographic elements, glowing lights, future concept art, clean aesthetic`;
            break;
          default:
            enhancedPrompt = `${enhancedPrompt}, high quality, detailed, professional, artistic, beautiful image, perfect lighting, masterpiece`;
        }

        // Add universal quality enhancers
        enhancedPrompt += ', 4k resolution, highly detailed, professional quality, perfect composition';

        // Limit prompt length to avoid API issues
        if (enhancedPrompt.length > 500) {
          enhancedPrompt = enhancedPrompt.substring(0, 500);
        }

        console.log(`Enhanced client prompt: ${enhancedPrompt}`);

        if (progressStatus) {
          progressStatus.textContent = 'Generating image with AI...';
        }

        // Create a timeout promise to handle API timeouts
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => {
            reject(new Error('AI generation timed out after 20 seconds'));
          }, 20000); // 20 second timeout (increased for better results)
        });

        // Use our secure server-side proxy for AI image generation
        try {
          if (progressStatus) {
            progressStatus.textContent = 'Searching AI image databases...';
          }

          // First try searching for existing AI-generated images
          const searchResponse = await fetch(`/api/ai/search?query=${encodeURIComponent(enhancedPrompt)}`);

          if (searchResponse.ok) {
            const data = await searchResponse.json();

            if (data.success && data.results && data.results.length > 0) {
              // Get a random image from the top results
              const randomIndex = Math.floor(Math.random() * data.results.length);
              const imageUrl = data.results[randomIndex].url;

              if (progressStatus) {
                progressStatus.textContent = 'Found perfect AI-generated image!';
              }

              console.log('Found AI-generated image from database:', imageUrl);
              return imageUrl;
            }
          }
        } catch (searchError) {
          console.error('Error searching AI images:', searchError);
          // Continue to generation if search fails
        }

        // If search fails, try generating a new image using our secure server proxy
        try {
          if (progressStatus) {
            progressStatus.textContent = 'Generating AI image...';
          }

          // Use our secure server-side AI service for image generation
          const generateResponse = await fetch('/api/ai/generate', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              prompt: enhancedPrompt,
              model: 'runwayml/stable-diffusion-v1-5' // Specify which model to use
            })
          });

          // Check if we got a successful response
          if (generateResponse.ok) {
            const data = await generateResponse.json();

            if (data.success && data.image) {
              if (progressStatus) {
                progressStatus.textContent = 'AI image generated successfully!';
              }

              console.log('Generated AI image successfully');
              return data.image; // This is already a data URL
            } else {
              throw new Error(data.message || 'Failed to generate image');
            }
          } else {
            throw new Error(`Server returned status: ${generateResponse.status}`);
          }
        } catch (generationError) {
          console.error('Error generating AI image:', generationError);
        }

        // Try using a public AI image search API
        try {
          if (progressStatus) {
            progressStatus.textContent = 'Searching public AI databases...';
          }

          // Use a simple search for AI-generated images
          const searchTerm = `${prompt} ${style} AI generated art`;
          const searchUrl = `https://source.unsplash.com/featured/?${encodeURIComponent(searchTerm)}`;

          const searchResponse = await fetch(searchUrl);
          if (searchResponse.ok) {
            return searchResponse.url;
          }
        } catch (searchError) {
          console.error('Error with image search:', searchError);
        }

        // If all AI services fail, throw an error to trigger server-side generation
        throw new Error('All client-side AI services failed');
      }
    } catch (error) {
      console.error('Client-side AI generation failed:', error);
      // Update the progress status to show the error
      const progressStatus = document.getElementById('progress-status');
      if (progressStatus) {
        progressStatus.textContent = 'AI generation failed, using server search...';
      }
      // Silently fail and let the server handle it
      return null;
    }

    // Return null if client-side generation failed or isn't supported
    return null;
  }

  // Modify the form submission to try client-side AI first
  document.getElementById('generate-form').addEventListener('submit', async function(e) {
    // Don't prevent default - we'll still submit the form if client-side fails
    // But we'll try client-side AI first

    const prompt = document.getElementById('prompt').value;
    const style = document.getElementById('style').value;

    // Try client-side AI generation
    const clientSideImage = await generateAIImage(prompt, style);

    // If client-side generation worked, use that image instead of submitting the form
    if (clientSideImage) {
      e.preventDefault(); // Now prevent the form submission

      // Show the result
      const generatePlaceholder = document.getElementById('generate-placeholder');
      const generateLoading = document.getElementById('generate-loading');
      const generateResult = document.getElementById('generate-result');
      const generatedPrompt = document.getElementById('generated-prompt');
      const generatedStyle = document.getElementById('generated-style');
      const generatedImage = document.getElementById('result-image');
      const generatedImageSolo = document.getElementById('generated-image-solo');
      const downloadGenerated = document.getElementById('download-generated');

      // Update UI
      generatePlaceholder.classList.add('hidden');
      generateLoading.classList.add('hidden');
      generateResult.classList.remove('hidden');

      // Set image and details
      generatedPrompt.textContent = prompt;
      generatedStyle.textContent = style;
      generatedImageSolo.src = clientSideImage;
      document.getElementById('result-without-reference').classList.remove('hidden');
      document.getElementById('result-with-reference').classList.add('hidden');

      // Set up download button
      downloadGenerated.onclick = () => {
        // Create a temporary link
        const a = document.createElement('a');
        a.href = clientSideImage;
        a.download = `fraiseai-${style}-${Date.now()}.png`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      };

      // Complete the progress animation
      const progressBar = document.getElementById('progress-bar');
      const progressPercentage = document.getElementById('progress-percentage');
      const progressStatus = document.getElementById('progress-status');

      if (progressBar && progressPercentage && progressStatus) {
        progressBar.style.width = '100%';
        progressPercentage.textContent = '100%';
        progressStatus.textContent = 'AI image generated successfully!';

        // Update all stage indicators to complete
        document.getElementById('stage-prompt-indicator').style.backgroundColor = '#10b981';
        document.getElementById('stage-generation-indicator').style.backgroundColor = '#10b981';
        document.getElementById('stage-enhancement-indicator').style.backgroundColor = '#10b981';
      }
    }
    // If client-side generation failed, the form will submit normally
  });

  // Initialize the page
  document.addEventListener('DOMContentLoaded', function() {
    // Set up tab switching
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove active class from all buttons
        tabButtons.forEach(btn => {
          btn.classList.remove('active', 'text-neon-blue', 'border-neon-blue');
          btn.classList.add('text-gray-400', 'border-transparent');
        });

        // Add active class to clicked button
        button.classList.add('active', 'text-neon-blue', 'border-neon-blue');
        button.classList.remove('text-gray-400', 'border-transparent');

        // Hide all tab contents
        tabContents.forEach(content => {
          content.classList.add('hidden');
        });

        // Show the corresponding tab content
        const tabId = button.id.replace('tab-', 'content-');
        document.getElementById(tabId).classList.remove('hidden');

        // Update URL hash
        window.location.hash = button.id.replace('tab-', '');

        // Load images if on the My Images tab
        if (button.id === 'tab-my-images') {
          loadMyImages();
          setupImageFilters();
        }
      });
    });

    // Check URL hash on page load
    const hash = window.location.hash.replace('#', '');
    if (hash) {
      const tabButton = document.getElementById(`tab-${hash}`);
      if (tabButton) {
        tabButton.click();
      }
    }

    // Load images if on the My Images tab
    if (window.location.hash === '#my-images') {
      loadMyImages();
      setupImageFilters();
    }
  });

  // Set up image filters and tabs
  function setupImageFilters() {
    // Filter dropdown toggle
    const filterDropdownBtn = document.getElementById('filter-dropdown-btn');
    const filterDropdown = document.getElementById('filter-dropdown');

    if (filterDropdownBtn) {
      filterDropdownBtn.addEventListener('click', () => {
        filterDropdown.classList.toggle('hidden');
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', (event) => {
        if (!filterDropdownBtn.contains(event.target) && !filterDropdown.contains(event.target)) {
          filterDropdown.classList.add('hidden');
        }
      });
    }

    // Filter checkboxes
    const filterAll = document.getElementById('filter-all');
    const filterUploaded = document.getElementById('filter-uploaded');
    const filterGenerated = document.getElementById('filter-generated');
    const filterTransformed = document.getElementById('filter-transformed');

    if (filterAll) {
      filterAll.addEventListener('change', () => {
        if (filterAll.checked) {
          filterUploaded.checked = false;
          filterGenerated.checked = false;
          filterTransformed.checked = false;
          currentFilter = 'all';
          currentPage = 1;
          applyFilters();
        }
      });
    }

    if (filterUploaded) {
      filterUploaded.addEventListener('change', () => {
        if (filterUploaded.checked) {
          filterAll.checked = false;
          filterGenerated.checked = false;
          filterTransformed.checked = false;
          currentFilter = 'uploaded';
          currentPage = 1;
          applyFilters();
        } else if (!filterGenerated.checked && !filterTransformed.checked) {
          filterAll.checked = true;
          currentFilter = 'all';
          currentPage = 1;
          applyFilters();
        }
      });
    }

    if (filterGenerated) {
      filterGenerated.addEventListener('change', () => {
        if (filterGenerated.checked) {
          filterAll.checked = false;
          filterUploaded.checked = false;
          filterTransformed.checked = false;
          currentFilter = 'generated';
          currentPage = 1;
          applyFilters();
        } else if (!filterUploaded.checked && !filterTransformed.checked) {
          filterAll.checked = true;
          currentFilter = 'all';
          currentPage = 1;
          applyFilters();
        }
      });
    }

    if (filterTransformed) {
      filterTransformed.addEventListener('change', () => {
        if (filterTransformed.checked) {
          filterAll.checked = false;
          filterUploaded.checked = false;
          filterGenerated.checked = false;
          currentFilter = 'transformed';
          currentPage = 1;
          applyFilters();
        } else if (!filterUploaded.checked && !filterGenerated.checked) {
          filterAll.checked = true;
          currentFilter = 'all';
          currentPage = 1;
          applyFilters();
        }
      });
    }

    // Search input
    const imageSearch = document.getElementById('image-search');
    if (imageSearch) {
      imageSearch.addEventListener('input', () => {
        searchQuery = imageSearch.value.trim();
        currentPage = 1;
        applyFilters();
      });
    }

    // Image type tabs
    const tabAllImages = document.getElementById('tab-all-images');
    const tabUploadedImages = document.getElementById('tab-uploaded-images');
    const tabAiImages = document.getElementById('tab-ai-images');

    if (tabAllImages) {
      tabAllImages.addEventListener('click', () => {
        tabAllImages.classList.add('text-white', 'border-neon-blue');
        tabAllImages.classList.remove('text-gray-400', 'border-transparent');
        tabUploadedImages.classList.add('text-gray-400', 'border-transparent');
        tabUploadedImages.classList.remove('text-white', 'border-neon-blue');
        tabAiImages.classList.add('text-gray-400', 'border-transparent');
        tabAiImages.classList.remove('text-white', 'border-neon-blue');

        currentFilter = 'all';
        currentPage = 1;
        filterAll.checked = true;
        filterUploaded.checked = false;
        filterGenerated.checked = false;
        filterTransformed.checked = false;
        applyFilters();
      });
    }

    if (tabUploadedImages) {
      tabUploadedImages.addEventListener('click', () => {
        tabUploadedImages.classList.add('text-white', 'border-neon-blue');
        tabUploadedImages.classList.remove('text-gray-400', 'border-transparent');
        tabAllImages.classList.add('text-gray-400', 'border-transparent');
        tabAllImages.classList.remove('text-white', 'border-neon-blue');
        tabAiImages.classList.add('text-gray-400', 'border-transparent');
        tabAiImages.classList.remove('text-white', 'border-neon-blue');

        currentFilter = 'uploaded';
        currentPage = 1;
        filterAll.checked = false;
        filterUploaded.checked = true;
        filterGenerated.checked = false;
        filterTransformed.checked = false;
        applyFilters();
      });
    }

    if (tabAiImages) {
      tabAiImages.addEventListener('click', () => {
        tabAiImages.classList.add('text-white', 'border-neon-blue');
        tabAiImages.classList.remove('text-gray-400', 'border-transparent');
        tabAllImages.classList.add('text-gray-400', 'border-transparent');
        tabAllImages.classList.remove('text-white', 'border-neon-blue');
        tabUploadedImages.classList.add('text-gray-400', 'border-transparent');
        tabUploadedImages.classList.remove('text-white', 'border-neon-blue');

        currentFilter = 'generated';
        currentPage = 1;
        filterAll.checked = false;
        filterUploaded.checked = false;
        filterGenerated.checked = true;
        filterTransformed.checked = false;
        applyFilters();
      });
    }

    // Load more button
    const loadMoreBtn = document.getElementById('load-more-btn');
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener('click', () => {
        currentPage++;
        applyFilters();
      });
    }
  }
</script>

<style>
  .image-loading {
    opacity: 0.7;
    filter: blur(5px);
    transition: opacity 0.3s, filter 0.3s;
  }

  @keyframes pulse {
    0% { opacity: 0.6; filter: blur(5px); }
    50% { opacity: 1; filter: blur(3px); }
    100% { opacity: 0.6; filter: blur(5px); }
  }

  @keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
  }

  #generate-result.loading-image {
    position: relative;
  }

  #generate-result.loading-image::after {
    content: "Loading image...";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    animation: pulse 1.5s infinite;
    z-index: 10;
  }

  /* Shimmer effect styles */
  .shimmer-text {
    background: linear-gradient(90deg,
      rgba(255,255,255,0) 0%,
      rgba(255,255,255,0.8) 50%,
      rgba(255,255,255,0) 100%);
    background-size: 200% 100%;
    animation: shimmer 2s infinite;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    text-shadow: 0 0 5px rgba(255,255,255,0.5);
    font-weight: bold;
  }

  .shimmer-container {
    position: relative;
    overflow: hidden;
  }

  .shimmer-container::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(90deg,
      rgba(255,255,255,0) 0%,
      rgba(255,255,255,0.1) 50%,
      rgba(255,255,255,0) 100%);
    background-size: 200% 100%;
    animation: shimmer 2s infinite;
    pointer-events: none;
  }
</style>