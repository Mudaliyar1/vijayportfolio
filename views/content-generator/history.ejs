<!-- Content Generation History Page -->
<div class="container mx-auto px-4 py-8">
  <div class="flex justify-between items-center mb-8">
    <div>
      <h1 class="text-3xl font-bold text-white mb-2">Content Generation History</h1>
      <p class="text-gray-400">View and manage your previously generated content</p>
    </div>
    <div>
      <a href="/content-generator" class="bg-dark-200 hover:bg-dark-300 text-gray-300 px-4 py-2 rounded-md transition-colors">
        <i class="fas fa-arrow-left mr-2"></i>Back to Generator
      </a>
    </div>
  </div>

  <div class="bg-dark-200 rounded-lg shadow-lg overflow-hidden">
    <div class="p-4 border-b border-gray-700">
      <div class="flex justify-between items-center">
        <h2 class="text-lg font-semibold text-white">All Generated Content</h2>
        <div class="flex items-center">
          <input type="text" id="content-search" placeholder="Search content..." class="bg-dark-300 text-white border border-gray-700 rounded-md px-3 py-2 text-sm focus:outline-none focus:border-neon-blue">
        </div>
      </div>
    </div>

    <div class="overflow-x-auto">
      <% if (contentHistory.length === 0) { %>
        <div class="p-8 text-center">
          <i class="fas fa-file-alt text-4xl text-gray-500 mb-3"></i>
          <p class="text-gray-400">You haven't generated any content yet</p>
          <a href="/content-generator" class="mt-4 inline-block bg-neon-blue hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors">
            Generate Your First Content
          </a>
        </div>
      <% } else { %>
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-dark-300">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Date</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Type</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Prompt</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Template</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-dark-200 divide-y divide-gray-700" id="content-table-body">
            <% contentHistory.forEach(content => { %>
              <tr class="content-row">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-white"><%= new Date(content.createdAt).toLocaleDateString() %></div>
                  <div class="text-xs text-gray-400"><%= new Date(content.createdAt).toLocaleTimeString() %></div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                    <%= content.contentType === 'website' ? 'bg-blue-100 text-blue-800' : 
                       content.contentType === 'blog' ? 'bg-green-100 text-green-800' : 
                       content.contentType === 'social' ? 'bg-purple-100 text-purple-800' : 
                       content.contentType === 'email' ? 'bg-yellow-100 text-yellow-800' : 
                       content.contentType === 'product' ? 'bg-red-100 text-red-800' : 
                       'bg-gray-100 text-gray-800' %>">
                    <%= content.contentType.charAt(0).toUpperCase() + content.contentType.slice(1) %>
                  </span>
                </td>
                <td class="px-6 py-4">
                  <div class="text-sm text-white truncate max-w-xs"><%= content.prompt %></div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-white">
                    <%= content.template ? content.template.name : 'None' %>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <div class="flex space-x-3">
                    <button class="text-neon-blue hover:text-blue-400 view-content-btn" data-id="<%= content._id %>">
                      <i class="fas fa-eye"></i> View
                    </button>
                    <button class="text-red-500 hover:text-red-400 delete-content-btn" data-id="<%= content._id %>">
                      <i class="fas fa-trash-alt"></i> Delete
                    </button>
                  </div>
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      <% } %>
    </div>
  </div>
</div>

<!-- Content View Modal -->
<div id="content-view-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
  <div class="bg-dark-200 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
    <div class="p-4 border-b border-gray-700 flex justify-between items-center">
      <h3 class="text-lg font-semibold text-white" id="modal-title">View Content</h3>
      <button id="close-modal-btn" class="text-gray-400 hover:text-white">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="p-6 overflow-y-auto max-h-[70vh]">
      <div class="mb-4">
        <h4 class="text-sm font-medium text-gray-400 mb-1">Prompt</h4>
        <p class="text-white bg-dark-300 p-3 rounded-md" id="modal-prompt"></p>
      </div>
      <div>
        <h4 class="text-sm font-medium text-gray-400 mb-1">Content</h4>
        <div class="text-white bg-dark-300 p-3 rounded-md prose prose-invert max-w-none" id="modal-content"></div>
      </div>
    </div>
    <div class="p-4 border-t border-gray-700 flex justify-end">
      <button id="modal-copy-btn" class="bg-dark-300 hover:bg-dark-400 text-gray-300 px-4 py-2 rounded-md mr-3 transition-colors">
        <i class="fas fa-copy mr-2"></i>Copy Content
      </button>
      <button id="close-modal-btn-2" class="bg-neon-blue hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors">
        Close
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const contentSearch = document.getElementById('content-search');
    const contentRows = document.querySelectorAll('.content-row');
    const viewButtons = document.querySelectorAll('.view-content-btn');
    const deleteButtons = document.querySelectorAll('.delete-content-btn');
    const modal = document.getElementById('content-view-modal');
    const closeModalBtns = document.querySelectorAll('#close-modal-btn, #close-modal-btn-2');
    const modalTitle = document.getElementById('modal-title');
    const modalPrompt = document.getElementById('modal-prompt');
    const modalContent = document.getElementById('modal-content');
    const modalCopyBtn = document.getElementById('modal-copy-btn');
    
    // Search functionality
    contentSearch.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      
      contentRows.forEach(row => {
        const prompt = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
        const type = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
        
        if (prompt.includes(searchTerm) || type.includes(searchTerm)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    });
    
    // View content
    viewButtons.forEach(button => {
      button.addEventListener('click', async function() {
        const contentId = this.getAttribute('data-id');
        
        // In a real implementation, you would fetch the content from the server
        // For now, we'll just use the data in the table
        const row = this.closest('tr');
        const type = row.querySelector('td:nth-child(2)').textContent.trim();
        const prompt = row.querySelector('td:nth-child(3)').textContent.trim();
        
        // Simulate fetching content
        modalTitle.textContent = `${type} Content`;
        modalPrompt.textContent = prompt;
        
        // Simulate loading content
        modalContent.innerHTML = '<div class="flex justify-center"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-neon-blue"></div></div>';
        
        // Show modal
        modal.classList.remove('hidden');
        
        // Simulate API call to get content
        setTimeout(() => {
          // This would be replaced with actual content from the API
          modalContent.innerHTML = `
            <h2>Sample ${type} Content</h2>
            <p>This is a sample content for the prompt: "${prompt}"</p>
            <p>In a real implementation, this would be the actual content stored in the database.</p>
            <ul>
              <li>Key point 1</li>
              <li>Key point 2</li>
              <li>Key point 3</li>
            </ul>
            <p>Thank you for using our AI Content Generator!</p>
          `;
        }, 1000);
      });
    });
    
    // Close modal
    closeModalBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        modal.classList.add('hidden');
      });
    });
    
    // Copy content
    modalCopyBtn.addEventListener('click', function() {
      const content = modalContent.innerText;
      
      // Create a temporary textarea to copy the content
      const textarea = document.createElement('textarea');
      textarea.value = content;
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand('copy');
      document.body.removeChild(textarea);
      
      // Show success message
      const originalText = modalCopyBtn.innerHTML;
      modalCopyBtn.innerHTML = '<i class="fas fa-check mr-2"></i>Copied!';
      setTimeout(() => {
        modalCopyBtn.innerHTML = originalText;
      }, 2000);
    });
    
    // Delete content
    deleteButtons.forEach(button => {
      button.addEventListener('click', async function() {
        if (confirm('Are you sure you want to delete this content? This action cannot be undone.')) {
          const contentId = this.getAttribute('data-id');
          const row = this.closest('tr');
          
          try {
            const response = await fetch(`/content-generator/history/${contentId}`, {
              method: 'DELETE'
            });
            
            const data = await response.json();
            
            if (data.success) {
              // Remove the row from the table
              row.remove();
              
              // If no more rows, show empty state
              if (document.querySelectorAll('.content-row').length === 0) {
                document.querySelector('.overflow-x-auto').innerHTML = `
                  <div class="p-8 text-center">
                    <i class="fas fa-file-alt text-4xl text-gray-500 mb-3"></i>
                    <p class="text-gray-400">You haven't generated any content yet</p>
                    <a href="/content-generator" class="mt-4 inline-block bg-neon-blue hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors">
                      Generate Your First Content
                    </a>
                  </div>
                `;
              }
            } else {
              alert('Failed to delete content: ' + data.message);
            }
          } catch (error) {
            console.error('Error deleting content:', error);
            alert('An error occurred while deleting content');
          }
        }
      });
    });
  });
</script>
